{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/accordion-item/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion item class",
          "name": "AccordionItem",
          "superclass": {
            "name": "AccordionItem",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-accordion-item",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided between the heading and the icon",
              "name": "start",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "Content which can be provided between the start slot and icon",
              "name": "end",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "Content which serves as the accordion item heading and text of the expand button",
              "name": "heading",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "The default slot for accordion item content",
              "name": "",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "The expanded icon",
              "name": "expanded-icon",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "The collapsed icon",
              "name": "collapsed-icon",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "Wraps the button",
              "name": "heading",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "The button which serves to invoke the item",
              "name": "button",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "Wraps the slot for the heading content within the button",
              "name": "heading-content",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "The icon container",
              "name": "icon",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "The expanded icon slot",
              "name": "expanded-icon",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "The collapsed icon",
              "name": "collapsed-icon",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "description": "The wrapper for the accordion item content",
              "name": "region",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "heading-level",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6"
              },
              "default": "2",
              "description": "Configures the https://www.w3.org/TR/wai-aria-1.1/#aria-level | level of the\nheading element.",
              "fieldName": "headinglevel",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              },
              "propName": "headingLevel"
            },
            {
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Expands or collapses the item.",
              "fieldName": "expanded",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "name": "id",
              "type": {
                "text": "string"
              },
              "description": "The item ID",
              "fieldName": "id",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              },
              "propName": "id"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headinglevel",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6"
              },
              "privacy": "public",
              "default": "2",
              "description": "Configures the {@link https://www.w3.org/TR/wai-aria-1.1/#aria-level | level} of the heading element.",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Expands or collapses the item.",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The item ID",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "privacy": "private",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the button is invoked",
              "name": "change",
              "inheritedFrom": {
                "name": "AccordionItem",
                "module": "src/accordion-item/accordion-item.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpAccordionItem",
          "description": "A function that returns a @microsoft/fast-foundation#AccordionItem registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#accordionItemTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpAccordionItem",
          "declaration": {
            "name": "jpAccordionItem",
            "module": "src/accordion-item/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "AccordionItem",
          "declaration": {
            "name": "JupyterAccordionItem",
            "module": "src/accordion-item/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "accordionItemStyles",
          "declaration": {
            "name": "styles",
            "module": "src/accordion-item/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/anchor/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Anchor class",
          "name": "Anchor",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "AnchorAppearance | undefined"
              },
              "privacy": "public",
              "description": "The appearance the anchor should have."
            },
            {
              "kind": "method",
              "name": "appearanceChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "AnchorAppearance"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "AnchorAppearance"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Prompts the user to save the linked URL. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The URL the hyperlink references. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Hints at the language of the referenced resource. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "referrerpolicy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLAnchorElement | undefined"
              },
              "privacy": "public",
              "description": "References the root element",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleUnsupportedDelegatesFocus",
              "privacy": "private",
              "description": "Overrides the focus call for where delegatesFocus is unsupported.\nThis check works for Chrome, Edge Chromium, FireFox, and Safari\nRelevant PR on the Firefox browser: https://phabricator.services.mozilla.com/D123858",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "AnchorAppearance | undefined"
              },
              "description": "The appearance the anchor should have.",
              "fieldName": "appearance",
              "propName": "appearance"
            },
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Prompts the user to save the linked URL. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "download"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "The URL the hyperlink references. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "href"
            },
            {
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "Hints at the language of the referenced resource. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "hreflang",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "hreflang"
            },
            {
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "ping",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "ping"
            },
            {
              "name": "referrerpolicy",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "referrerpolicy",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "referrerpolicy"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "rel",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "rel"
            },
            {
              "name": "target",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "target"
            },
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "type"
            }
          ],
          "superclass": {
            "name": "Anchor",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-anchor",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the anchor content",
              "name": "start",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "description": "Content which can be provided after the anchor content",
              "name": "end",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "description": "The default slot for anchor content",
              "name": "",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The anchor element",
              "name": "control",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "description": "The element wrapping anchor content",
              "name": "content",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpAnchor",
          "description": "A function that returns a @microsoft/fast-foundation#Anchor registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#anchorTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpAnchor",
          "declaration": {
            "name": "jpAnchor",
            "module": "src/anchor/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Anchor",
          "declaration": {
            "name": "JupyterAnchor",
            "module": "src/anchor/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "anchorStyles",
          "declaration": {
            "name": "styles",
            "module": "src/anchor/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/anchored-region/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Anchored region class",
          "name": "AnchoredRegion",
          "superclass": {
            "name": "AnchoredRegion",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-anchored-region",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the content",
              "name": "",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The HTML ID of the anchor element this region is positioned relative to",
              "fieldName": "anchor",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "anchor"
            },
            {
              "name": "viewport",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The HTML ID of the viewport element this region is positioned relative to",
              "fieldName": "viewport",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "viewport"
            },
            {
              "name": "horizontal-positioning-mode",
              "type": {
                "text": "AxisPositioningMode"
              },
              "default": "\"uncontrolled\"",
              "description": "Sets what logic the component uses to determine horizontal placement.\n'locktodefault' forces the default position\n'dynamic' decides placement based on available space\n'uncontrolled' does not control placement on the horizontal axis",
              "fieldName": "horizontalPositioningMode",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "horizontalPositioningMode"
            },
            {
              "name": "horizontal-default-position",
              "type": {
                "text": "HorizontalPosition"
              },
              "default": "\"unset\"",
              "description": "The default horizontal position of the region relative to the anchor element",
              "fieldName": "horizontalDefaultPosition",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "horizontalDefaultPosition"
            },
            {
              "name": "horizontal-viewport-lock",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region remains in the viewport (ie. detaches from the anchor) on the horizontal axis",
              "fieldName": "horizontalViewportLock",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "horizontalViewportLock"
            },
            {
              "name": "horizontal-inset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region overlaps the anchor on the horizontal axis",
              "fieldName": "horizontalInset",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "horizontalInset"
            },
            {
              "name": "horizontal-threshold",
              "type": {
                "text": "number"
              },
              "description": "How narrow the space allocated to the default position has to be before the widest area\nis selected for layout",
              "fieldName": "horizontalThreshold",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "horizontalThreshold"
            },
            {
              "name": "horizontal-scaling",
              "type": {
                "text": "AxisScalingMode"
              },
              "default": "\"content\"",
              "description": "Defines how the width of the region is calculated",
              "fieldName": "horizontalScaling",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "horizontalScaling"
            },
            {
              "name": "vertical-positioning-mode",
              "type": {
                "text": "AxisPositioningMode"
              },
              "default": "\"uncontrolled\"",
              "description": "Sets what logic the component uses to determine vertical placement.\n'locktodefault' forces the default position\n'dynamic' decides placement based on available space\n'uncontrolled' does not control placement on the vertical axis",
              "fieldName": "verticalPositioningMode",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "verticalPositioningMode"
            },
            {
              "name": "vertical-default-position",
              "type": {
                "text": "VerticalPosition"
              },
              "default": "\"unset\"",
              "description": "The default vertical position of the region relative to the anchor element",
              "fieldName": "verticalDefaultPosition",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "verticalDefaultPosition"
            },
            {
              "name": "vertical-viewport-lock",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region remains in the viewport (ie. detaches from the anchor) on the vertical axis",
              "fieldName": "verticalViewportLock",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "verticalViewportLock"
            },
            {
              "name": "vertical-inset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region overlaps the anchor on the vertical axis",
              "fieldName": "verticalInset",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "verticalInset"
            },
            {
              "name": "vertical-threshold",
              "type": {
                "text": "number"
              },
              "description": "How short the space allocated to the default position has to be before the tallest area\nis selected for layout",
              "fieldName": "verticalThreshold",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "verticalThreshold"
            },
            {
              "name": "vertical-scaling",
              "type": {
                "text": "AxisScalingMode"
              },
              "default": "\"content\"",
              "description": "Defines how the height of the region is calculated",
              "fieldName": "verticalScaling",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "verticalScaling"
            },
            {
              "name": "fixed-placement",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region is positioned using css \"position: fixed\".\nOtherwise the region uses \"position: absolute\".\nFixed placement allows the region to break out of parent containers,",
              "fieldName": "fixedPlacement",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "fixedPlacement"
            },
            {
              "name": "auto-update-mode",
              "type": {
                "text": "AutoUpdateMode"
              },
              "default": "\"anchor\"",
              "description": "Defines what triggers the anchored region to revaluate positioning",
              "fieldName": "autoUpdateMode",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              },
              "propName": "autoUpdateMode"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "The HTML ID of the anchor element this region is positioned relative to",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "anchorChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "viewport",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "The HTML ID of the viewport element this region is positioned relative to",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "viewportChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontalPositioningMode",
              "type": {
                "text": "AxisPositioningMode"
              },
              "privacy": "public",
              "default": "\"uncontrolled\"",
              "description": "Sets what logic the component uses to determine horizontal placement.\n'locktodefault' forces the default position\n'dynamic' decides placement based on available space\n'uncontrolled' does not control placement on the horizontal axis",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "horizontalPositioningModeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontalDefaultPosition",
              "type": {
                "text": "HorizontalPosition"
              },
              "privacy": "public",
              "default": "\"unset\"",
              "description": "The default horizontal position of the region relative to the anchor element",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "horizontalDefaultPositionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontalViewportLock",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region remains in the viewport (ie. detaches from the anchor) on the horizontal axis",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "horizontalViewportLockChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontalInset",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region overlaps the anchor on the horizontal axis",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "horizontalInsetChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontalThreshold",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "How narrow the space allocated to the default position has to be before the widest area\nis selected for layout",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "horizontalThresholdChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontalScaling",
              "type": {
                "text": "AxisScalingMode"
              },
              "privacy": "public",
              "default": "\"content\"",
              "description": "Defines how the width of the region is calculated",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "horizontalScalingChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "verticalPositioningMode",
              "type": {
                "text": "AxisPositioningMode"
              },
              "privacy": "public",
              "default": "\"uncontrolled\"",
              "description": "Sets what logic the component uses to determine vertical placement.\n'locktodefault' forces the default position\n'dynamic' decides placement based on available space\n'uncontrolled' does not control placement on the vertical axis",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "verticalPositioningModeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "verticalDefaultPosition",
              "type": {
                "text": "VerticalPosition"
              },
              "privacy": "public",
              "default": "\"unset\"",
              "description": "The default vertical position of the region relative to the anchor element",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "verticalDefaultPositionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "verticalViewportLock",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region remains in the viewport (ie. detaches from the anchor) on the vertical axis",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "verticalViewportLockChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "verticalInset",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region overlaps the anchor on the vertical axis",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "verticalInsetChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "verticalThreshold",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "How short the space allocated to the default position has to be before the tallest area\nis selected for layout",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "verticalThresholdChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "verticalScaling",
              "type": {
                "text": "AxisScalingMode"
              },
              "privacy": "public",
              "default": "\"content\"",
              "description": "Defines how the height of the region is calculated",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "verticalScalingChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "fixedPlacement",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region is positioned using css \"position: fixed\".\nOtherwise the region uses \"position: absolute\".\nFixed placement allows the region to break out of parent containers,",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "fixedPlacementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoUpdateMode",
              "type": {
                "text": "AutoUpdateMode"
              },
              "privacy": "public",
              "default": "\"anchor\"",
              "description": "Defines what triggers the anchored region to revaluate positioning",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "autoUpdateModeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prevMode",
                  "type": {
                    "text": "AutoUpdateMode"
                  }
                },
                {
                  "name": "newMode",
                  "type": {
                    "text": "AutoUpdateMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The HTML element being used as the anchor",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "anchorElementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "viewportElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The HTML element being used as the viewport",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "viewportElementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "verticalPosition",
              "type": {
                "text": "AnchoredRegionPositionLabel | undefined"
              },
              "privacy": "public",
              "description": "indicates the current horizontal position of the region",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontalPosition",
              "type": {
                "text": "AnchoredRegionPositionLabel | undefined"
              },
              "privacy": "public",
              "description": "indicates the current vertical position of the region",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "translateX",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "description": "values to be applied to the component's transform on render",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "translateY",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "regionWidth",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "description": "the span to be applied to the region on each axis",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "regionHeight",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizeDetector",
              "type": {
                "text": "ResizeObserverClassDefinition | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "viewportRect",
              "type": {
                "text": "ClientRect | DOMRect | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorRect",
              "type": {
                "text": "ClientRect | DOMRect | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "regionRect",
              "type": {
                "text": "ClientRect | DOMRect | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseHorizontalOffset",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "base offsets between the positioner's base position and the anchor's",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "baseVerticalOffset",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "pendingPositioningUpdate",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "pendingReset",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentDirection",
              "type": {
                "text": "Direction"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "regionVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "forceUpdate",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateThreshold",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0.5",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "intersectionService",
              "type": {
                "text": "IntersectionService"
              },
              "privacy": "private",
              "static": true,
              "default": "new IntersectionService()",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "update",
              "privacy": "public",
              "description": "update position",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnectResizeDetector",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "destroys the instance's resize observer",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "initializeResizeDetector",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "initializes the instance's resize observer",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateForAttributeChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "react to attribute changes that don't require a reset",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "initialize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "fully initializes the component",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "requestReset",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Request a reset if there are currently no open requests",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInitialState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "sets the starting configuration for component internal values",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "startObservers",
              "privacy": "private",
              "description": "starts observers",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "requestPositionUpdates",
              "privacy": "private",
              "description": "get position updates",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "stopObservers",
              "privacy": "private",
              "description": "stops observers",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "getViewport",
              "privacy": "private",
              "description": "Gets the viewport element by id, or defaults to document root",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "getAnchor",
              "privacy": "private",
              "description": "Gets the anchor element by id",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleIntersection",
              "privacy": "private",
              "description": "Handle intersections",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "applyIntersectionEntries",
              "privacy": "private",
              "description": "iterate through intersection entries and apply data",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateRegionOffset",
              "privacy": "private",
              "description": "Update the offset values",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "isRectDifferent",
              "privacy": "private",
              "description": "compare rects to see if there is enough change to justify a DOM update",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleResize",
              "privacy": "private",
              "description": "Handle resize events",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "reset",
              "privacy": "private",
              "description": "resets the component",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateLayout",
              "privacy": "private",
              "description": "Recalculate layout related state values",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateRegionStyle",
              "privacy": "private",
              "description": "Updates the style string applied to the region element as well as the css classes attached\nto the root element",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "updatePositionClasses",
              "privacy": "private",
              "description": "Updates the css classes that reflect the current position of the element",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "setHorizontalPosition",
              "privacy": "private",
              "description": "Get horizontal positioning state based on desired position",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "setVerticalPosition",
              "privacy": "private",
              "description": "Set vertical positioning state based on desired position",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "getPositioningOptions",
              "privacy": "private",
              "description": "Get available positions based on positioning mode",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "getAvailableSpace",
              "privacy": "private",
              "description": "Get the space available for a particular relative position",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "getNextRegionDimension",
              "privacy": "private",
              "description": "Get region dimensions",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "startAutoUpdateEventListeners",
              "privacy": "private",
              "description": "starts event listeners that can trigger auto updating",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "stopAutoUpdateEventListeners",
              "privacy": "private",
              "description": "stops event listeners that can trigger auto updating",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'loaded' event when the region is loaded and visible",
              "name": "loaded",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            },
            {
              "description": "Fires a custom 'positionchange' event when the position has changed",
              "name": "positionchange",
              "inheritedFrom": {
                "name": "AnchoredRegion",
                "module": "src/anchored-region/anchored-region.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpAnchoredRegion",
          "description": "A function that returns a @microsoft/fast-foundation#AnchoredRegion registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#anchoredRegionTemplate"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpAnchoredRegion",
          "declaration": {
            "name": "jpAnchoredRegion",
            "module": "src/anchored-region/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "AnchoredRegion",
          "declaration": {
            "name": "JupyterAnchoredRegion",
            "module": "src/anchored-region/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "anchoredRegionStyles",
          "declaration": {
            "name": "styles",
            "module": "src/anchored-region/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/avatar/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Jupyter Avatar Class",
          "name": "Avatar",
          "members": [
            {
              "kind": "field",
              "name": "imgSrc",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "Indicates the Avatar should have an image source"
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "Indicates the Avatar should have alt text"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the Avatar should have a color fill.",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the Avatar should have a text color.",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            },
            {
              "kind": "field",
              "name": "link",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the Avatar should have url link",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "AvatarShape"
              },
              "privacy": "public",
              "description": "Indicates the Avatar shape should be. By default it will be set to \"circle\".",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "Indicates the Avatar should have an image source",
              "fieldName": "imgSrc",
              "propName": "src"
            },
            {
              "name": "alt",
              "type": {
                "text": "string | undefined"
              },
              "description": "Indicates the Avatar should have alt text",
              "fieldName": "alt",
              "propName": "alt"
            },
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "description": "Indicates the Avatar should have a color fill.",
              "fieldName": "fill",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              },
              "propName": "fill"
            },
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "description": "Indicates the Avatar should have a text color.",
              "fieldName": "color",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              },
              "propName": "color"
            },
            {
              "name": "link",
              "type": {
                "text": "string"
              },
              "description": "Indicates the Avatar should have url link",
              "fieldName": "link",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              },
              "propName": "link"
            },
            {
              "name": "shape",
              "type": {
                "text": "AvatarShape"
              },
              "description": "Indicates the Avatar shape should be. By default it will be set to \"circle\".",
              "fieldName": "shape",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              },
              "propName": "shape"
            }
          ],
          "superclass": {
            "name": "Avatar",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-avatar",
          "customElement": true,
          "slots": [
            {
              "description": "Used for media such as an image",
              "name": "media",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            },
            {
              "description": "The default slot for avatar text, commonly a name or initials",
              "name": "",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            },
            {
              "description": "Used to provide a badge, such as a status badge",
              "name": "badge",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The wrapping container for the avatar",
              "name": "backplate",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            },
            {
              "description": "The avatar link",
              "name": "link",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            },
            {
              "description": "The media slot",
              "name": "media",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            },
            {
              "description": "The default slot",
              "name": "content",
              "inheritedFrom": {
                "name": "Avatar",
                "module": "src/avatar/avatar.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "imgTemplate",
          "default": "html<JupyterAvatar>` ${when( x => x.imgSrc, html` <img src=\"${x => x.imgSrc}\" alt=\"${x => x.alt}\" slot=\"media\" class=\"media\" part=\"media\" /> ` )} `",
          "description": "The Jupyter Avatar Template for Images",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "jpAvatar",
          "description": "A function that returns a @microsoft/fast-foundation#Avatar registration for configuring the component with a DesignSystem.\n @microsoft/fast-foundation#avatarTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "imgTemplate",
          "declaration": {
            "name": "imgTemplate",
            "module": "src/avatar/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpAvatar",
          "declaration": {
            "name": "jpAvatar",
            "module": "src/avatar/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Avatar",
          "declaration": {
            "name": "JupyterAvatar",
            "module": "src/avatar/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "avatarStyles",
          "declaration": {
            "name": "styles",
            "module": "src/avatar/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/accordion/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion class",
          "name": "Accordion",
          "superclass": {
            "name": "Accordion",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-accordion",
          "customElement": true,
          "cssParts": [
            {
              "description": "The slot for the accordion items",
              "name": "item",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "expand-mode",
              "type": {
                "text": "AccordionExpandMode"
              },
              "description": "Controls the expand mode of the Accordion, either allowing\nsingle or multiple item expansion.",
              "fieldName": "expandmode",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              },
              "propName": "expandMode"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "expandmode",
              "type": {
                "text": "AccordionExpandMode"
              },
              "privacy": "public",
              "description": "Controls the expand mode of the Accordion, either allowing\nsingle or multiple item expansion.",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeid",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeItemIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "accordionIds",
              "type": {
                "text": "Array<string | null>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "method",
              "name": "findExpandedItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "AccordionItem | null"
                }
              },
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "setItems",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "removeItemListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeItemChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "method",
              "name": "getItemIds",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Array<string | null>"
                }
              },
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "method",
              "name": "isSingleExpandMode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleItemKeyDown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleItemFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "method",
              "name": "adjust",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "adjustment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the active item changes",
              "name": "change",
              "inheritedFrom": {
                "name": "Accordion",
                "module": "src/accordion/accordion.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpAccordion",
          "description": "A function that returns a @microsoft/fast-foundation#Accordion registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#accordionTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "../accordion-item/index.js"
          }
        },
        {
          "kind": "js",
          "name": "jpAccordion",
          "declaration": {
            "name": "jpAccordion",
            "module": "src/accordion/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Accordion",
          "declaration": {
            "name": "JupyterAccordion",
            "module": "src/accordion/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "accordionStyles",
          "declaration": {
            "name": "styles",
            "module": "src/accordion/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/badge/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Badge class",
          "name": "Badge",
          "superclass": {
            "name": "Badge",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-badge",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the badge",
              "name": "",
              "inheritedFrom": {
                "name": "Badge",
                "module": "src/badge/badge.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The element representing the badge, which wraps the default slot",
              "name": "control",
              "inheritedFrom": {
                "name": "Badge",
                "module": "src/badge/badge.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "description": "Indicates the badge should have a filled style.",
              "fieldName": "fill",
              "inheritedFrom": {
                "name": "Badge",
                "module": "src/badge/badge.ts"
              },
              "propName": "fill"
            },
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "description": "Indicates the badge should have a filled style.",
              "fieldName": "color",
              "inheritedFrom": {
                "name": "Badge",
                "module": "src/badge/badge.ts"
              },
              "propName": "color"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates the element should be circular",
              "fieldName": "circular",
              "inheritedFrom": {
                "name": "Badge",
                "module": "src/badge/badge.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the badge should have a filled style.",
              "inheritedFrom": {
                "name": "Badge",
                "module": "src/badge/badge.ts"
              }
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the badge should have a filled style.",
              "inheritedFrom": {
                "name": "Badge",
                "module": "src/badge/badge.ts"
              }
            },
            {
              "kind": "field",
              "name": "circular",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates the element should be circular",
              "inheritedFrom": {
                "name": "Badge",
                "module": "src/badge/badge.ts"
              }
            },
            {
              "kind": "field",
              "name": "generateBadgeStyle",
              "privacy": "public",
              "inheritedFrom": {
                "name": "Badge",
                "module": "src/badge/badge.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpBadge",
          "description": "A function that returns a @microsoft/fast-foundation#Badge registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#badgeTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpBadge",
          "declaration": {
            "name": "jpBadge",
            "module": "src/badge/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Badge",
          "declaration": {
            "name": "JupyterBadge",
            "module": "src/badge/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "badgeStyles",
          "declaration": {
            "name": "styles",
            "module": "src/badge/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/breadcrumb/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Breadcrumb class",
          "name": "Breadcrumb",
          "superclass": {
            "name": "Breadcrumb",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-breadcrumb",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the breadcrumb items",
              "name": "",
              "inheritedFrom": {
                "name": "Breadcrumb",
                "module": "src/breadcrumb/breadcrumb.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The element wrapping the slotted items",
              "name": "list",
              "inheritedFrom": {
                "name": "Breadcrumb",
                "module": "src/breadcrumb/breadcrumb.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "slottedBreadcrumbItemsChanged",
              "privacy": "public",
              "inheritedFrom": {
                "name": "Breadcrumb",
                "module": "src/breadcrumb/breadcrumb.ts"
              }
            },
            {
              "kind": "method",
              "name": "setItemSeparator",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "isLastNode",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Breadcrumb",
                "module": "src/breadcrumb/breadcrumb.ts"
              }
            },
            {
              "kind": "method",
              "name": "findChildWithHref",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Finds href on childnodes in the light DOM or shadow DOM.\nWe look in the shadow DOM because we insert an anchor when breadcrumb-item has an href.",
              "inheritedFrom": {
                "name": "Breadcrumb",
                "module": "src/breadcrumb/breadcrumb.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAriaCurrent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "isLastNode",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets ARIA Current for the current node\nIf child node with an anchor tag and with href is found then set aria-current to correct value for the child node,\notherwise apply aria-current to the host element, with an href",
              "inheritedFrom": {
                "name": "Breadcrumb",
                "module": "src/breadcrumb/breadcrumb.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpBreadcrumb",
          "description": "A function that returns a @microsoft/fast-foundation#Breadcrumb registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#breadcrumbTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpBreadcrumb",
          "declaration": {
            "name": "jpBreadcrumb",
            "module": "src/breadcrumb/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Breadcrumb",
          "declaration": {
            "name": "JupyterBreadcrumb",
            "module": "src/breadcrumb/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "breadcrumbStyles",
          "declaration": {
            "name": "styles",
            "module": "src/breadcrumb/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/breadcrumb-item/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Breadcrumb item class",
          "name": "BreadcrumbItem",
          "superclass": {
            "name": "BreadcrumbItem",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-breadcrumb-item",
          "customElement": true,
          "attributes": [
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Prompts the user to save the linked URL. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "download"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "The URL the hyperlink references. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "href"
            },
            {
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "Hints at the language of the referenced resource. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "hreflang",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "hreflang"
            },
            {
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "ping",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "ping"
            },
            {
              "name": "referrerpolicy",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "referrerpolicy",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "referrerpolicy"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "rel",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "rel"
            },
            {
              "name": "target",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "target"
            },
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              },
              "propName": "type"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Prompts the user to save the linked URL. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The URL the hyperlink references. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Hints at the language of the referenced resource. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "referrerpolicy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLAnchorElement | undefined"
              },
              "privacy": "public",
              "description": "References the root element",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleUnsupportedDelegatesFocus",
              "privacy": "private",
              "description": "Overrides the focus call for where delegatesFocus is unsupported.\nThis check works for Chrome, Edge Chromium, FireFox, and Safari\nRelevant PR on the Firefox browser: https://phabricator.services.mozilla.com/D123858",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the anchor content",
              "name": "start",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "description": "Content which can be provided after the anchor content",
              "name": "end",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "description": "The default slot for anchor content",
              "name": "",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The anchor element",
              "name": "control",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "description": "The element wrapping anchor content",
              "name": "content",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpBreadcrumbItem",
          "description": "A function that returns a @microsoft/fast-foundation#BreadcrumbItem registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#breadcrumbItemTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpBreadcrumbItem",
          "declaration": {
            "name": "jpBreadcrumbItem",
            "module": "src/breadcrumb-item/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "BreadcrumbItem",
          "declaration": {
            "name": "JupyterBreadcrumbItem",
            "module": "src/breadcrumb-item/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "breadcrumbItemStyles",
          "declaration": {
            "name": "styles",
            "module": "src/breadcrumb-item/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Button class",
          "name": "Button",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "ButtonAppearance"
              },
              "privacy": "public",
              "default": "'neutral'",
              "description": "The appearance the button should have."
            },
            {
              "kind": "field",
              "name": "minimal",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether the button has a compact layout or not."
            },
            {
              "kind": "method",
              "name": "defaultSlottedContentChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "description": "Applies 'icon-only' class when there is only an SVG in the default slot"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Determines if the element should receive document focus on page load.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formId",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The id of a form to associate the element to.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formaction",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "formactionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formenctype",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "formenctypeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formmethod",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "formmethodChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formnovalidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "formnovalidateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "formtarget",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "formtargetChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"submit\" | \"reset\" | \"button\""
              },
              "privacy": "public",
              "description": "The button type.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "typeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "previous",
                  "type": {
                    "text": "\"submit\" | \"reset\" | \"button\" | void"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "\"submit\" | \"reset\" | \"button\""
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultSlottedContent",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "public",
              "description": "\nDefault slotted content",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleSubmission",
              "privacy": "private",
              "description": "Submits the parent form",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleFormReset",
              "privacy": "private",
              "description": "Resets the parent form",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleUnsupportedDelegatesFocus",
              "privacy": "private",
              "description": "Overrides the focus call for where delegatesFocus is unsupported.\nThis check works for Chrome, Edge Chromium, FireFox, and Safari\nRelevant PR on the Firefox browser: https://phabricator.services.mozilla.com/D123858",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "ButtonAppearance"
              },
              "default": "'neutral'",
              "description": "The appearance the button should have.",
              "fieldName": "appearance",
              "propName": "appearance"
            },
            {
              "name": "minimal",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the button has a compact layout or not.",
              "fieldName": "minimal",
              "propName": "minimal"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Determines if the element should receive document focus on page load.",
              "fieldName": "autofocus",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "The id of a form to associate the element to.",
              "fieldName": "formId",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              },
              "propName": "form"
            },
            {
              "name": "formaction",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
              "fieldName": "formaction",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              },
              "propName": "formaction"
            },
            {
              "name": "formenctype",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
              "fieldName": "formenctype",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              },
              "propName": "formenctype"
            },
            {
              "name": "formmethod",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
              "fieldName": "formmethod",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              },
              "propName": "formmethod"
            },
            {
              "name": "formtarget",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
              "fieldName": "formtarget",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              },
              "propName": "formtarget"
            },
            {
              "name": "type",
              "type": {
                "text": "\"submit\" | \"reset\" | \"button\""
              },
              "description": "The button type.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              },
              "propName": "type"
            }
          ],
          "superclass": {
            "name": "Button",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-button",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the button content",
              "name": "start",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "description": "Content which can be provided after the button content",
              "name": "end",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "description": "The default slot for button content",
              "name": "",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The button element",
              "name": "control",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            },
            {
              "description": "The element wrapping button content",
              "name": "content",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/button/button.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpButton",
          "description": "A function that returns a @microsoft/fast-foundation#Button registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#buttonTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpButton",
          "declaration": {
            "name": "jpButton",
            "module": "src/button/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "JupyterButton",
            "module": "src/button/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "buttonStyles",
          "declaration": {
            "name": "styles",
            "module": "src/button/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/card/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Card class",
          "name": "Card",
          "superclass": {
            "name": "Card",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-card",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the card content",
              "name": "",
              "inheritedFrom": {
                "name": "Card",
                "module": "src/card/card.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpCard",
          "description": "A function that returns a @microsoft/fast-foundation#Card registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#cardTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpCard",
          "declaration": {
            "name": "jpCard",
            "module": "src/card/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "JupyterCard",
            "module": "src/card/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardStyles",
          "declaration": {
            "name": "styles",
            "module": "src/card/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/checkbox/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "checkboxTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the @microsoft/fast-foundation#(Checkbox:class) component.",
          "privacy": "public"
        },
        {
          "kind": "class",
          "description": "Checkbox class",
          "name": "Checkbox",
          "members": [
            {
              "kind": "method",
              "name": "indeterminateChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The indeterminate state of the control",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            }
          ],
          "superclass": {
            "name": "Checkbox",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-checkbox",
          "customElement": true,
          "slots": [
            {
              "description": "The checked indicator",
              "name": "checked-indicator",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "description": "The indeterminate indicator",
              "name": "indeterminate-indicator",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "description": "The default slot for the label",
              "name": "",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The element representing the visual checkbox control",
              "name": "control",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            },
            {
              "description": "The label",
              "name": "label",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              },
              "propName": "readonly"
            }
          ],
          "events": [
            {
              "description": "Emits a custom change event when the checked state changes",
              "name": "change",
              "inheritedFrom": {
                "name": "Checkbox",
                "module": "src/checkbox/checkbox.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpCheckbox",
          "description": "A function that returns a @microsoft/fast-foundation#Checkbox registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#checkboxTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "checkboxTemplate",
          "declaration": {
            "name": "checkboxTemplate",
            "module": "src/checkbox/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpCheckbox",
          "declaration": {
            "name": "jpCheckbox",
            "module": "src/checkbox/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Checkbox",
          "declaration": {
            "name": "JupyterCheckbox",
            "module": "src/checkbox/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "checkboxStyles",
          "declaration": {
            "name": "styles",
            "module": "src/checkbox/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/combobox/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Combobox class",
          "name": "Combobox",
          "members": [
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether the combobox has a compact layout or not."
            },
            {
              "kind": "field",
              "name": "minimal",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether the combobox has a compact layout or not."
            },
            {
              "kind": "method",
              "name": "autoWidthChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "boolean | undefined"
                  },
                  "description": "the previous autoWidth value"
                },
                {
                  "name": "next",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "the current autoWidth value"
                }
              ],
              "description": "(Un-)set the width when the autoWidth property changes."
            },
            {
              "kind": "method",
              "name": "setAutoWidth",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Compute the listbox width to set the one of the input."
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "ComboboxAutocomplete | undefined"
              },
              "description": "The autocomplete attribute.",
              "privacy": "public",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "filteredOptions",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "The collection of currently filtered options.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "isAutocompleteInline",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "isAutocompleteList",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "isAutocompleteBoth",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The open attribute.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "description": "The list of options.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "positionAttribute",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "privacy": "public",
              "description": "The placement for the listbox when the combobox is open.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "privacy": "public",
              "description": "The current state of the calculated position of the listbox.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "method",
              "name": "positionChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "SelectPosition | undefined"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "SelectPosition | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value property.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "method",
              "name": "filterOptions",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Filter available options by text value.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "method",
              "name": "setPositioning",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Calculate and apply listbox positioning based on available viewport space.",
              "parameters": [
                {
                  "description": "direction to force the listbox to display",
                  "name": "force"
                }
              ],
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "length",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The number of options.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeAheadExpired",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the listbox.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "-1",
              "description": "The index of the selected option.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "A collection of the selected options.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "slottedOptionFilter",
              "privacy": "public",
              "static": true,
              "description": "A static filter to include only selectable options.",
              "parameters": [
                {
                  "description": "element to filter",
                  "name": "n"
                }
              ],
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectFirstOption",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Moves focus to the first selectable option.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "public",
              "description": "Sets an option as selected and gives it focus.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autowidth",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the combobox has a compact layout or not.",
              "fieldName": "autoWidth",
              "propName": "autowidth"
            },
            {
              "name": "minimal",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the combobox has a compact layout or not.",
              "fieldName": "minimal",
              "propName": "minimal"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "ComboboxAutocomplete | undefined"
              },
              "description": "The autocomplete attribute.",
              "fieldName": "autocomplete",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              },
              "propName": "autocomplete"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The open attribute.",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              },
              "propName": "open"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              },
              "propName": "placeholder"
            },
            {
              "name": "position",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "description": "The placement for the listbox when the combobox is open.",
              "fieldName": "positionAttribute",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              },
              "propName": "position"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the listbox.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            }
          ],
          "superclass": {
            "name": "Combobox",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-combobox",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the input",
              "name": "start",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "description": "Content which can be provided after the input",
              "name": "end",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "description": "Used to replace the input element representing the combobox",
              "name": "control",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "description": "The visual indicator representing the expanded state",
              "name": "indicator",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "description": "The default slot for the options",
              "name": "",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The wrapper element containing the input area, including start and end",
              "name": "control",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "description": "The input element representing the selected value",
              "name": "selected-value",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "description": "The element wrapping the indicator slot",
              "name": "indicator",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            },
            {
              "description": "The wrapper for the listbox slotted options",
              "name": "listbox",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the value updates",
              "name": "change",
              "inheritedFrom": {
                "name": "Combobox",
                "module": "src/combobox/combobox.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpCombobox",
          "description": "A function that returns a @microsoft/fast-foundation#Combobox registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#comboboxTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpCombobox",
          "declaration": {
            "name": "jpCombobox",
            "module": "src/combobox/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Combobox",
          "declaration": {
            "name": "JupyterCombobox",
            "module": "src/combobox/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "comboboxStyles",
          "declaration": {
            "name": "styles",
            "module": "src/combobox/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data-grid/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "DataGridCell class",
          "name": "DataGridCell",
          "superclass": {
            "name": "DataGridCell",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-data-grid-cell",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for cell contents.  The \"cell contents template\" renders here.",
              "name": "",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "cell-type",
              "type": {
                "text": "DataGridCellTypes"
              },
              "description": "The type of cell",
              "fieldName": "cellType",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              },
              "propName": "cellType"
            },
            {
              "name": "grid-column",
              "type": {
                "text": "string"
              },
              "description": "The column index of the cell.\nThis will be applied to the css grid-column-index value\napplied to the cell",
              "fieldName": "gridColumn",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              },
              "propName": "gridColumn"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "cellType",
              "type": {
                "text": "DataGridCellTypes"
              },
              "privacy": "public",
              "description": "The type of cell",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "method",
              "name": "cellTypeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "field",
              "name": "gridColumn",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The column index of the cell.\nThis will be applied to the css grid-column-index value\napplied to the cell",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "method",
              "name": "gridColumnChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowData",
              "type": {
                "text": "object | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The base data for the parent row",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "field",
              "name": "columnDefinition",
              "type": {
                "text": "ColumnDefinition | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The base data for the column",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "method",
              "name": "columnDefinitionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "ColumnDefinition | null"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "ColumnDefinition | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "field",
              "name": "isActiveCell",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "field",
              "name": "customCellView",
              "type": {
                "text": "HTMLView | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusin",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusout",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateCellView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnectCellView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateCellStyle",
              "privacy": "private",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'cell-focused' event when focus is on the cell or its contents",
              "name": "cell-focused",
              "inheritedFrom": {
                "name": "DataGridCell",
                "module": "src/data-grid/data-grid-cell.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpDataGridCell",
          "description": "A function that returns a @microsoft/fast-foundation#DataGridCell registration for configuring the component with a DesignSystem.",
          "privacy": "public"
        },
        {
          "kind": "class",
          "description": "DataGridRow class",
          "name": "DataGridRow",
          "superclass": {
            "name": "DataGridRow",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-data-grid-row",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for custom cell elements",
              "name": "",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "grid-template-columns",
              "type": {
                "text": "string"
              },
              "description": "String that gets applied to the the css gridTemplateColumns attribute for the row",
              "fieldName": "gridTemplateColumns",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              },
              "propName": "gridTemplateColumns"
            },
            {
              "name": "row-type",
              "type": {
                "text": "DataGridRowTypes"
              },
              "description": "The type of row",
              "fieldName": "rowType",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              },
              "propName": "rowType"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "gridTemplateColumns",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "String that gets applied to the the css gridTemplateColumns attribute for the row",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "gridTemplateColumnsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowType",
              "type": {
                "text": "DataGridRowTypes"
              },
              "privacy": "public",
              "description": "The type of row",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "rowTypeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowData",
              "type": {
                "text": "object | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The base data for this row",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "rowDataChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "columnDefinitions",
              "type": {
                "text": "ColumnDefinition[] | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The column definitions of the row",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "cellItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "The template used to render cells in generated rows.",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "cellItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "headerCellItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "The template used to render header cells in generated rows.",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "headerCellItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The index of the row in the parent grid.\nThis is typically set programmatically by the parent grid.",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "cellsRepeatBehavior",
              "type": {
                "text": "RepeatBehavior | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "cellsPlaceholder",
              "type": {
                "text": "Node | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "refocusOnLoad",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusout",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCellFocus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateItemTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateRowStyle",
              "privacy": "private",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'row-focused' event when focus is on an element (usually a cell or its contents) in the row",
              "name": "row-focused",
              "inheritedFrom": {
                "name": "DataGridRow",
                "module": "src/data-grid/data-grid-row.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpDataGridRow",
          "description": "A function that returns a @microsoft/fast-foundation#DataGridRow registration for configuring the component with a DesignSystem.",
          "privacy": "public"
        },
        {
          "kind": "class",
          "description": "DataGrid class",
          "name": "DataGrid",
          "superclass": {
            "name": "DataGrid",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-data-grid",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for custom row elements",
              "name": "",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-tabbing",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true the component will not add itself to the tab queue.\nDefault is false.",
              "fieldName": "noTabbing",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              },
              "propName": "noTabbing"
            },
            {
              "name": "generate-header",
              "type": {
                "text": "GenerateHeaderOptions"
              },
              "description": "Whether the grid should automatically generate a header row and its type",
              "fieldName": "generateHeader",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              },
              "propName": "generateHeader"
            },
            {
              "name": "grid-template-columns",
              "type": {
                "text": "string"
              },
              "description": "String that gets applied to the the css gridTemplateColumns attribute of child rows",
              "fieldName": "gridTemplateColumns",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              },
              "propName": "gridTemplateColumns"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "generateColumns",
              "privacy": "public",
              "static": true,
              "description": "generates a basic column definition by examining sample row data",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "generateTemplateColumns",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "columnDefinitions",
                  "type": {
                    "text": "ColumnDefinition[]"
                  }
                }
              ],
              "description": "generates a gridTemplateColumns based on columndata array",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "noTabbing",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When true the component will not add itself to the tab queue.\nDefault is false.",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "noTabbingChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "generateHeader",
              "type": {
                "text": "GenerateHeaderOptions"
              },
              "privacy": "public",
              "description": "Whether the grid should automatically generate a header row and its type",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "generateHeaderChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "gridTemplateColumns",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "String that gets applied to the the css gridTemplateColumns attribute of child rows",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "gridTemplateColumnsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowsData",
              "type": {
                "text": "object[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "The data being displayed in the grid",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "rowsDataChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "columnDefinitions",
              "type": {
                "text": "ColumnDefinition[] | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The column definitions of the grid",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "columnDefinitionsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowItemTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "The template to use for the programmatic generation of rows",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "cellItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "The template used to render cells in generated rows.",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "headerCellItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "The template used to render header cells in generated rows.",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "headerCellItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusRowIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The index of the row that will receive focus the next time the\ngrid is focused. This value changes as focus moves to different\nrows within the grid.  Changing this value when focus is already\nwithin the grid moves focus to the specified row.",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusRowIndexChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusColumnIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The index of the column that will receive focus the next time the\ngrid is focused. This value changes as focus moves to different rows\nwithin the grid.  Changing this value when focus is already within\nthe grid moves focus to the specified column.",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusColumnIndexChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowElementTag",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Set by the component templates.",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowsRepeatBehavior",
              "type": {
                "text": "RepeatBehavior | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowsPlaceholder",
              "type": {
                "text": "Node | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "generatedHeader",
              "type": {
                "text": "DataGridRow | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "isUpdatingFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "pendingFocusUpdate",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "observer",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "rowindexUpdateQueued",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "columnDefinitionsStale",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "generatedGridTemplateColumns",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\"",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusOnCell",
              "privacy": "private",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "queueFocusUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleGeneratedHeader",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "onChildListChange",
              "privacy": "private",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "queueRowIndexUpdate",
              "privacy": "private",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateRowIndexes",
              "privacy": "private",
              "inheritedFrom": {
                "name": "DataGrid",
                "module": "src/data-grid/data-grid.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpDataGrid",
          "description": "A function that returns a @microsoft/fast-foundation#DataGrid registration for configuring the component with a DesignSystem.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpDataGridCell",
          "declaration": {
            "name": "jpDataGridCell",
            "module": "src/data-grid/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpDataGridRow",
          "declaration": {
            "name": "jpDataGridRow",
            "module": "src/data-grid/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpDataGrid",
          "declaration": {
            "name": "jpDataGrid",
            "module": "src/data-grid/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataGrid",
          "declaration": {
            "name": "JupyterDataGrid",
            "module": "src/data-grid/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataGridRow",
          "declaration": {
            "name": "JupyterDataGridRow",
            "module": "src/data-grid/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataGridCell",
          "declaration": {
            "name": "JupyterDataGridCell",
            "module": "src/data-grid/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "dataGridCellStyles",
          "declaration": {
            "name": "dataGridCellStyles",
            "module": "src/data-grid/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "dataGridStyles",
          "declaration": {
            "name": "dataGridStyles",
            "module": "src/data-grid/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "dataGridRowStyles",
          "declaration": {
            "name": "dataGridRowStyles",
            "module": "src/data-grid/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/date-field/index.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "jpDateField",
          "description": "A function that returns a @jupyter/web-components#DateField registration for configuring the component with a DesignSystem.\nImplements @jupyter/web-components#dateFieldTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./date-field.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./date-field.template.js"
          }
        },
        {
          "kind": "js",
          "name": "jpDateField",
          "declaration": {
            "name": "jpDateField",
            "module": "src/date-field/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "dateFieldStyles",
          "declaration": {
            "name": "styles",
            "module": "src/date-field/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/design-system-provider/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "designSystemProviderTemplate",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "ElementDefinitionContext"
              }
            },
            {
              "name": "definition",
              "type": {
                "text": "FoundationElementDefinition"
              }
            }
          ],
          "description": "Template for DesignSystemProvider.",
          "privacy": "public"
        },
        {
          "kind": "function",
          "name": "designSystemProviderStyles",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "ElementDefinitionContext"
              }
            },
            {
              "name": "definition",
              "type": {
                "text": "FoundationElementDefinition"
              }
            }
          ],
          "description": "Styles for DesignSystemProvider.",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "jpDesignSystemProvider",
          "description": "A function that returns a DesignSystemProvider registration for configuring the component with a DesignSystem.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "designSystemProviderTemplate",
          "declaration": {
            "name": "designSystemProviderTemplate",
            "module": "src/design-system-provider/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "designSystemProviderStyles",
          "declaration": {
            "name": "designSystemProviderStyles",
            "module": "src/design-system-provider/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpDesignSystemProvider",
          "declaration": {
            "name": "jpDesignSystemProvider",
            "module": "src/design-system-provider/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/dialog/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Dialog class",
          "name": "Dialog",
          "superclass": {
            "name": "Dialog",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-dialog",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the dialog content",
              "name": "",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "A wrapping element used to center the dialog and position the modal overlay",
              "name": "positioning-region",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "description": "The modal dialog overlay",
              "name": "overlay",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "description": "The dialog element",
              "name": "control",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Indicates the element is modal. When modal, user mouse interaction will be limited to the contents of the element by a modal\noverlay.  Clicks on the overlay will cause the dialog to emit a \"dismiss\" event.",
              "fieldName": "modal",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "name": "trap-focus",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Indicates that the dialog should trap focus.",
              "fieldName": "trapFocus",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              },
              "propName": "trapFocus"
            },
            {
              "name": "aria-describedby",
              "type": {
                "text": "string"
              },
              "description": "The id of the element describing the dialog.",
              "fieldName": "ariaDescribedby",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              },
              "propName": "ariaDescribedby"
            },
            {
              "name": "aria-labelledby",
              "type": {
                "text": "string"
              },
              "description": "The id of the element labeling the dialog.",
              "fieldName": "ariaLabelledby",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              },
              "propName": "ariaLabelledby"
            },
            {
              "name": "aria-label",
              "type": {
                "text": "string"
              },
              "description": "The label surfaced to assistive technologies.",
              "fieldName": "ariaLabel",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              },
              "propName": "ariaLabel"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Indicates the element is modal. When modal, user mouse interaction will be limited to the contents of the element by a modal\noverlay.  Clicks on the overlay will cause the dialog to emit a \"dismiss\" event.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The hidden state of the element.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "trapFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Indicates that the dialog should trap focus.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "trapFocusChanged",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaDescribedby",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The id of the element describing the dialog.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabelledby",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The id of the element labeling the dialog.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label surfaced to assistive technologies.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "The method to show the dialog.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "The method to hide the dialog.",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleDocumentKeydown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleDocumentFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleTabKeyDown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "getTabQueueBounds",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusFirstElement",
              "privacy": "private",
              "description": "focus on first element of tab queue",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "shouldForceFocus",
              "privacy": "private",
              "description": "we should only focus if focus has not already been brought to the dialog",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "shouldTrapFocus",
              "privacy": "private",
              "description": "we should we be active trapping focus",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'cancel' event when the modal overlay is clicked",
              "name": "cancel",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            },
            {
              "description": "Fires a custom 'close' event when the dialog is hidden",
              "name": "close",
              "inheritedFrom": {
                "name": "Dialog",
                "module": "src/dialog/dialog.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpDialog",
          "description": "A function that returns a @microsoft/fast-foundation#Dialog registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#dialogTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpDialog",
          "declaration": {
            "name": "jpDialog",
            "module": "src/dialog/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Dialog",
          "declaration": {
            "name": "JupyterDialog",
            "module": "src/dialog/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "dialogStyles",
          "declaration": {
            "name": "styles",
            "module": "src/dialog/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/disclosure/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Disclosure class",
          "name": "Disclosure",
          "members": [
            {
              "kind": "field",
              "name": "height",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "Disclosure default height"
            },
            {
              "kind": "field",
              "name": "totalHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "Disclosure height after it's expanded"
            },
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "DisclosureAppearance | undefined"
              },
              "privacy": "public",
              "description": "The appearance the anchor should have."
            },
            {
              "kind": "method",
              "name": "appearanceChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "DisclosureAppearance"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "DisclosureAppearance"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onToggle",
              "privacy": "protected",
              "description": "Set disclosure height while transitioning",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "kind": "method",
              "name": "setup",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Calculate disclosure height before and after expanded",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "kind": "field",
              "name": "disclosureHeight",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Determines if the element should show the extra content or not.",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Invoker title",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Show extra content.",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hide extra content.",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle the current(expanded/collapsed) state.",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "DisclosureAppearance | undefined"
              },
              "description": "The appearance the anchor should have.",
              "fieldName": "appearance",
              "propName": "appearance"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Determines if the element should show the extra content or not.",
              "fieldName": "expanded",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "Invoker title",
              "fieldName": "title",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              },
              "propName": "title"
            }
          ],
          "superclass": {
            "name": "Disclosure",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-disclosure",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the summary content",
              "name": "start",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "description": "Content which can be provided after the summary content",
              "name": "end",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "description": "The summary content",
              "name": "title",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            },
            {
              "description": "The default slot for the disclosure content",
              "name": "",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            }
          ],
          "events": [
            {
              "description": "fires a toggle event when the summary is toggled",
              "name": "toggle",
              "inheritedFrom": {
                "name": "Disclosure",
                "module": "src/disclosure/disclosure.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpDisclosure",
          "description": "A function that returns a @microsoft/fast-foundation#Disclosure registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#disclosureTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpDisclosure",
          "declaration": {
            "name": "jpDisclosure",
            "module": "src/disclosure/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disclosure",
          "declaration": {
            "name": "JupyterDisclosure",
            "module": "src/disclosure/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "disclosureStyles",
          "declaration": {
            "name": "styles",
            "module": "src/disclosure/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/divider/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Divider class",
          "name": "Divider",
          "superclass": {
            "name": "Divider",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-divider",
          "customElement": true,
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "DividerRole"
              },
              "description": "The role of the element.",
              "fieldName": "role",
              "inheritedFrom": {
                "name": "Divider",
                "module": "src/divider/divider.ts"
              },
              "propName": "role"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "description": "The orientation of the divider.",
              "fieldName": "orientation",
              "inheritedFrom": {
                "name": "Divider",
                "module": "src/divider/divider.ts"
              },
              "propName": "orientation"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "DividerRole"
              },
              "privacy": "public",
              "description": "The role of the element.",
              "inheritedFrom": {
                "name": "Divider",
                "module": "src/divider/divider.ts"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "privacy": "public",
              "description": "The orientation of the divider.",
              "inheritedFrom": {
                "name": "Divider",
                "module": "src/divider/divider.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpDivider",
          "description": "A function that returns a @microsoft/fast-foundation#Divider registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#dividerTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpDivider",
          "declaration": {
            "name": "jpDivider",
            "module": "src/divider/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Divider",
          "declaration": {
            "name": "JupyterDivider",
            "module": "src/divider/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "dividerStyles",
          "declaration": {
            "name": "styles",
            "module": "src/divider/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/listbox/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Listbox class",
          "name": "Listbox",
          "superclass": {
            "name": "ListboxElement",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-listbox",
          "customElement": true,
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates if the listbox is in multi-selection mode.",
              "fieldName": "multiple",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates if the listbox is in multi-selection mode.",
              "inheritedFrom": {
                "name": "ListboxElement",
                "module": "src/listbox/listbox.element.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of options to display.",
              "inheritedFrom": {
                "name": "ListboxElement",
                "module": "src/listbox/listbox.element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "public",
              "description": "Sets an option as selected and gives it focus.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "length",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The number of options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "description": "The list of options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeAheadExpired",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the listbox.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "-1",
              "description": "The index of the selected option.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "A collection of the selected options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "slottedOptionFilter",
              "privacy": "public",
              "static": true,
              "description": "A static filter to include only selectable options.",
              "parameters": [
                {
                  "description": "element to filter",
                  "name": "n"
                }
              ],
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectFirstOption",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Moves focus to the first selectable option.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "slots": [
            {
              "description": "The default slot for the listbox options",
              "name": "",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpListbox",
          "description": "A function that returns a @microsoft/fast-foundation#ListboxElement registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#listboxTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpListbox",
          "declaration": {
            "name": "jpListbox",
            "module": "src/listbox/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Listbox",
          "declaration": {
            "name": "JupyterListbox",
            "module": "src/listbox/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "listboxStyles",
          "declaration": {
            "name": "styles",
            "module": "src/listbox/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/menu/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Menu class",
          "name": "Menu",
          "superclass": {
            "name": "Menu",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-menu",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the menu items",
              "name": "",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "itemsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuItems",
              "type": {
                "text": "Element[] | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "expandedItem",
              "type": {
                "text": "MenuItem | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "-1",
              "description": "The index of the focusable element in the items array\ndefaults to -1",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusableElementRoles",
              "type": {
                "text": "{ [key: string]: string }"
              },
              "privacy": "private",
              "static": true,
              "default": "roleForMenuItem",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses the first item in the menu.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "collapseExpandedItem",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Collapses any expanded menu items.",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleItemFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleExpandedChanged",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "removeItemListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "setItems",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "changeHandler",
              "privacy": "private",
              "description": "handle change from child element",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "domChildren",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Element[]"
                }
              },
              "description": "get an array of valid DOM children",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "isMenuItemElement",
              "privacy": "private",
              "description": "check if the item is a menu item",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "privacy": "private",
              "description": "check if the item is focusable",
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "focusIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "adjustment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Menu",
                "module": "src/menu/menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpMenu",
          "description": "A function that returns a @microsoft/fast-foundation#Menu registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#menuTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpMenu",
          "declaration": {
            "name": "jpMenu",
            "module": "src/menu/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Menu",
          "declaration": {
            "name": "JupyterMenu",
            "module": "src/menu/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "menuStyles",
          "declaration": {
            "name": "styles",
            "module": "src/menu/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/menu-item/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Menu item class",
          "name": "MenuItem",
          "superclass": {
            "name": "MenuItem",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-menu-item",
          "customElement": true,
          "slots": [
            {
              "description": "The checked indicator",
              "name": "checked-indicator",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "The radio indicator",
              "name": "radio-indicator",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "Content which can be provided before the menu item content",
              "name": "start",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "Content which can be provided after the menu item content",
              "name": "end",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "The default slot for menu item content",
              "name": "",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "The expand/collapse indicator",
              "name": "expand-collapse-indicator",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "Used to nest menu's within menu items",
              "name": "submenu",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The element representing the visual checked or radio indicator",
              "name": "input-container",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "The element wrapping the `menuitemcheckbox` indicator",
              "name": "checkbox",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "The element wrapping the `menuitemradio` indicator",
              "name": "radio",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "The element wrapping the menu item content",
              "name": "content",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "The element wrapping the expand collapse element",
              "name": "expand-collapse-glyph-container",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "The expand/collapse element",
              "name": "expand-collapse",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "The container for the submenu, used for positioning",
              "name": "submenu-region",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the element.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "name": "role",
              "type": {
                "text": "MenuItemRole"
              },
              "description": "The role of the element.",
              "fieldName": "role",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              },
              "propName": "role"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the element.",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The expanded state of the element.",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "expandedChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "MenuItemRole"
              },
              "privacy": "public",
              "description": "The role of the element.",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The checked value of the element.",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkedChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusSubmenuOnLoad",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "observer",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "domChildren",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Element[]"
                }
              },
              "description": "get an array of valid DOM children",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'expanded-change' event when the expanded state changes",
              "name": "expanded-change",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            },
            {
              "description": "Fires a custom 'change' event when a non-submenu item with a role of `menuitemcheckbox`, `menuitemradio`, or `menuitem` is invoked",
              "name": "change",
              "inheritedFrom": {
                "name": "MenuItem",
                "module": "src/menu-item/menu-item.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpMenuItem",
          "description": "A function that returns a @microsoft/fast-foundation#MenuItem registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#menuItemTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpMenuItem",
          "declaration": {
            "name": "jpMenuItem",
            "module": "src/menu-item/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "MenuItem",
          "declaration": {
            "name": "JupyterMenuItem",
            "module": "src/menu-item/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "menuItemStyles",
          "declaration": {
            "name": "styles",
            "module": "src/menu-item/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Number field class",
          "name": "NumberField",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "NumberFieldAppearance"
              },
              "privacy": "public",
              "default": "'outline'",
              "description": "The appearance of the element."
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that this element should get focus after the page finishes loading. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideStep",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When true, spin buttons will not be rendered",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters a user can enter.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters a user can enter.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Sets the width of the element to a specified number of characters.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "Amount to increment or decrement the value by",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum the value can be",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum the value can be",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The value property, typed as a number.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Increments the value using the step value",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Decrements the value using the step value",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects all the text in the number field",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "NumberFieldAppearance"
              },
              "default": "'outline'",
              "description": "The appearance of the element.",
              "fieldName": "appearance",
              "propName": "appearance"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              },
              "propName": "readonly"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "Indicates that this element should get focus after the page finishes loading. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute for more information.",
              "fieldName": "autofocus",
              "default": "1",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "name": "hide-step",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, spin buttons will not be rendered",
              "fieldName": "hideStep",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              },
              "propName": "hideStep"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              },
              "propName": "placeholder"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
              "fieldName": "list",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              },
              "propName": "list"
            }
          ],
          "superclass": {
            "name": "NumberField",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-number-field",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the number field input",
              "name": "start",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "Content which can be provided after the number field input",
              "name": "end",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "The default slot for the label",
              "name": "",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "The glyph for the step up control",
              "name": "step-up-glyph",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "The glyph for the step down control",
              "name": "step-down-glyph",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The label",
              "name": "label",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "The element wrapping the control, including start and end slots",
              "name": "root",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "The element representing the input",
              "name": "control",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "The step up and step down controls",
              "name": "controls",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "The step up control",
              "name": "step-up",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "The step down control",
              "name": "step-down",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'input' event when the value has changed",
              "name": "input",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            },
            {
              "description": "Fires a custom 'change' event when the value has changed",
              "name": "change",
              "inheritedFrom": {
                "name": "NumberField",
                "module": "src/number-field/number-field.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpNumberField",
          "description": "A function that returns a @microsoft/fast-foundation#NumberField registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#numberFieldTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpNumberField",
          "declaration": {
            "name": "jpNumberField",
            "module": "src/number-field/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "NumberField",
          "declaration": {
            "name": "JupyterNumberField",
            "module": "src/number-field/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "numberFieldStyles",
          "declaration": {
            "name": "styles",
            "module": "src/number-field/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/option/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Listbox option class",
          "name": "ListboxOption",
          "superclass": {
            "name": "ListboxOption",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-option",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the listbox option content",
              "name": "start",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "description": "Content which can be provided after the listbox option content",
              "name": "end",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "description": "The default slot for listbox option content",
              "name": "",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "Wraps the listbox option content",
              "name": "content",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the option.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "description": "The selected attribute value. This sets the initial selected value.",
              "fieldName": "selectedAttribute",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              },
              "propName": "selected"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The initial value of the option. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
              "fieldName": "initialValue",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              },
              "propName": "value"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "public",
              "description": "The checked state is used when the parent listbox is in multiple selection mode.\nTo avoid accessibility conflicts, the checked state should not be present in\nsingle selection mode.",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkedChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "boolean | unknown"
                  },
                  "description": "the previous checked value"
                },
                {
                  "name": "next",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "the current checked value"
                }
              ],
              "description": "Updates the ariaChecked property when the checked property changes.",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "Node[]"
              },
              "privacy": "public",
              "description": "The default slotted content.",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultSelected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The defaultSelected state of the option.",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "defaultSelectedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the option.",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "disabledChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedAttribute",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The selected attribute value. This sets the initial selected value.",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectedAttributeChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The checked state of the control.",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "dirtyValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Track whether the value has been changed from the initial value",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialValue",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "The initial value of the option. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "initialValueChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "previous",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "default": "new Option(\n            `${this.textContent}`,\n            this.initialValue,\n            this.defaultSelected,\n            this.selected\n        )",
              "inheritedFrom": {
                "name": "ListboxOption",
                "module": "src/listbox-option/listbox-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpOption",
          "description": "A function that returns a @microsoft/fast-foundation#ListboxOption registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#listboxOptionTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpOption",
          "declaration": {
            "name": "jpOption",
            "module": "src/option/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Option",
          "declaration": {
            "name": "JupyterListboxOption",
            "module": "src/option/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "optionStyles",
          "declaration": {
            "name": "styles",
            "module": "src/option/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/progress/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Progress bar class",
          "name": "Progress",
          "superclass": {
            "name": "BaseProgress",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-progress",
          "customElement": true,
          "slots": [
            {
              "description": "The slot for a custom indeterminate indicator",
              "name": "indeterminate",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "Represents the progress element",
              "name": "progress",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "description": "The determinate indicator",
              "name": "determinate",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "description": "The indeterminate indicator",
              "name": "indeterminate",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "The value of the progress",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | null"
              },
              "privacy": "public",
              "description": "The value of the progress",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum value",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "method",
              "name": "minChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum value",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "field",
              "name": "paused",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates the progress is paused",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "method",
              "name": "updatePercentComplete",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpProgress",
          "description": "A function that returns a @microsoft/fast-foundation#BaseProgress registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#progressTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpProgress",
          "declaration": {
            "name": "jpProgress",
            "module": "src/progress/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Progress",
          "declaration": {
            "name": "JupyterProgress",
            "module": "src/progress/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "progressStyles",
          "declaration": {
            "name": "styles",
            "module": "src/progress/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/progress-ring/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Progress ring class",
          "name": "ProgressRing",
          "superclass": {
            "name": "BaseProgress",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-progress-ring",
          "customElement": true,
          "slots": [
            {
              "description": "The slot for a custom indeterminate indicator",
              "name": "indeterminate",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "Represents the progress element",
              "name": "progress",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "description": "The determinate indicator",
              "name": "determinate",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "description": "The indeterminate indicator",
              "name": "indeterminate",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "The value of the progress",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | null"
              },
              "privacy": "public",
              "description": "The value of the progress",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum value",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "method",
              "name": "minChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum value",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "field",
              "name": "paused",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates the progress is paused",
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "method",
              "name": "updatePercentComplete",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseProgress",
                "module": "src/progress/base-progress.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpProgressRing",
          "description": "A function that returns a @microsoft/fast-foundation#BaseProgress registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#progressRingTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpProgressRing",
          "declaration": {
            "name": "jpProgressRing",
            "module": "src/progress-ring/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "ProgressRing",
          "declaration": {
            "name": "JupyterProgressRing",
            "module": "src/progress-ring/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "progressRingStyles",
          "declaration": {
            "name": "styles",
            "module": "src/progress-ring/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "radioTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ]
        },
        {
          "kind": "class",
          "description": "Radio class",
          "name": "Radio",
          "superclass": {
            "name": "Radio",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-radio",
          "customElement": true,
          "slots": [
            {
              "description": "The checked indicator",
              "name": "checked-indicator",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "description": "The default slot for the label",
              "name": "",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The element representing the visual radio control",
              "name": "control",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "description": "The label",
              "name": "label",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              },
              "propName": "readonly"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name of the radio. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname | name attribute} for more info.",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "method",
              "name": "isInsideRadioGroup",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emits a custom change event when the checked state changes",
              "name": "change",
              "inheritedFrom": {
                "name": "Radio",
                "module": "src/radio/radio.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpRadio",
          "description": "A function that returns a @microsoft/fast-foundation#Radio registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#radioTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "radioTemplate",
          "declaration": {
            "name": "radioTemplate",
            "module": "src/radio/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpRadio",
          "declaration": {
            "name": "jpRadio",
            "module": "src/radio/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "JupyterRadio",
            "module": "src/radio/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "radioStyles",
          "declaration": {
            "name": "styles",
            "module": "src/radio/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio-group/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "RadioGroup class",
          "name": "RadioGroup",
          "members": [
            {
              "kind": "method",
              "name": "ariaInvalidChanged",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the child radios will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Disables the radio group and child radios.",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "disabledChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name of the radio group. Setting this value will set the name value\nfor all child radio elements.",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "nameChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The value of the checked radio",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation | \"horizontal\" | \"vertical\""
              },
              "privacy": "public",
              "description": "The orientation of the group",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "childItems",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "slottedRadioButtonsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedRadio",
              "type": {
                "text": "HTMLInputElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "focusedRadio",
              "type": {
                "text": "HTMLInputElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "Direction"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "parentToolbar",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "isInsideToolbar",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "isInsideFoundationToolbar",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "method",
              "name": "setupRadioButtons",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "radioChangeHandler",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "moveToRadioByIndex",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "moveRightOffGroup",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "moveLeftOffGroup",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "shouldMoveOffGroupToTheRight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "shouldMoveOffGroupToTheLeft",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "checkFocusedRadio",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "moveRight",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "moveLeft",
              "privacy": "private",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "RadioGroup",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-radio-group",
          "customElement": true,
          "slots": [
            {
              "description": "The slot for the label",
              "name": "label",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            },
            {
              "description": "The default slot for radio buttons",
              "name": "",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The positioning region for laying out the radios",
              "name": "positioning-region",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the child radios will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              },
              "propName": "readonly"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Disables the radio group and child radios.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              },
              "propName": "disabled"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the radio group. Setting this value will set the name value\nfor all child radio elements.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              },
              "propName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the checked radio",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              },
              "propName": "value"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation | \"horizontal\" | \"vertical\""
              },
              "description": "The orientation of the group",
              "fieldName": "orientation",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              },
              "propName": "orientation"
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the value changes",
              "name": "change",
              "inheritedFrom": {
                "name": "RadioGroup",
                "module": "src/radio-group/radio-group.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpRadioGroup",
          "description": "A function that returns a @microsoft/fast-foundation#RadioGroup registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#radioGroupTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpRadioGroup",
          "declaration": {
            "name": "jpRadioGroup",
            "module": "src/radio-group/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "RadioGroup",
          "declaration": {
            "name": "JupyterRadioGroup",
            "module": "src/radio-group/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "radioGroupStyles",
          "declaration": {
            "name": "styles",
            "module": "src/radio-group/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Search field class",
          "name": "Search",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "SearchAppearance"
              },
              "privacy": "public",
              "default": "'outline'",
              "description": "The appearance of the element."
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that this element should get focus after the page finishes loading. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "autofocusChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "placeholderChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "listChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters a user can enter.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters a user can enter.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "minlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A regular expression that the value must match to pass validation.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "patternChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Sets the width of the element to a specified number of characters.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "sizeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Controls whether or not to enable spell checking for the input field, or if the default spell checking configuration should be used.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "spellcheckChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClearInput",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handles the control's clear value event",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "SearchAppearance"
              },
              "default": "'outline'",
              "description": "The appearance of the element.",
              "fieldName": "appearance",
              "propName": "appearance"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              },
              "propName": "readonly"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that this element should get focus after the page finishes loading. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute for more information.",
              "fieldName": "autofocus",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              },
              "propName": "placeholder"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
              "fieldName": "list",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              },
              "propName": "list"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression that the value must match to pass validation.",
              "fieldName": "pattern",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              },
              "propName": "pattern"
            }
          ],
          "superclass": {
            "name": "Search",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-search",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the search input",
              "name": "start",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "description": "Content which can be provided after the search clear button",
              "name": "end",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "description": "The default slot for the label",
              "name": "",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "description": "The clear button",
              "name": "close-button",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "description": "The clear glyph",
              "name": "close-glyph",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The label",
              "name": "label",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "description": "The element wrapping the control, including start and end slots",
              "name": "root",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "description": "The element representing the input",
              "name": "control",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            },
            {
              "description": "The button to clear the input",
              "name": "clear-button",
              "inheritedFrom": {
                "name": "Search",
                "module": "src/search/search.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpSearch",
          "description": "A function that returns a @microsoft/fast-foundation#Search registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#searchTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpSearch",
          "declaration": {
            "name": "jpSearch",
            "module": "src/search/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Search",
          "declaration": {
            "name": "JupyterSearch",
            "module": "src/search/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "searchStyles",
          "declaration": {
            "name": "styles",
            "module": "src/search/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Select class",
          "name": "Select",
          "members": [
            {
              "kind": "field",
              "name": "autoWidth",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether the select has a compact layout or not."
            },
            {
              "kind": "method",
              "name": "autoWidthChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "boolean | undefined"
                  },
                  "description": "the previous autoWidth value"
                },
                {
                  "name": "next",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "the current autoWidth value"
                }
              ],
              "description": "(Un-)set the width when the autoWidth property changes."
            },
            {
              "kind": "method",
              "name": "setAutoWidth",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Compute the listbox width to set the one of the input."
            },
            {
              "kind": "field",
              "name": "minimal",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether the select has a compact layout or not."
            },
            {
              "kind": "method",
              "name": "setPositioning",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Calculate and apply listbox positioning based on available viewport space.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The open attribute.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value property.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "positionAttribute",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "privacy": "public",
              "description": "Reflects the placement for the listbox when the select is open.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "privacy": "public",
              "description": "Holds the current state for the calculated position of the listbox.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "positionChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "SelectPosition | undefined"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "SelectPosition | undefined"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayValue",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The value displayed on the button.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "multipleChanged",
              "privacy": "public",
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "boolean | undefined"
                  },
                  "description": "the previous multiple value"
                },
                {
                  "name": "next",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "the current multiple value"
                }
              ],
              "description": "Sets the multiple property on the proxy element.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates if the listbox is in multi-selection mode.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of options to display.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "public",
              "description": "Sets an option as selected and gives it focus.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "length",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The number of options.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "description": "The list of options.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeAheadExpired",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the listbox.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "-1",
              "description": "The index of the selected option.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "A collection of the selected options.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "slottedOptionFilter",
              "privacy": "public",
              "static": true,
              "description": "A static filter to include only selectable options.",
              "parameters": [
                {
                  "description": "element to filter",
                  "name": "n"
                }
              ],
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectFirstOption",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Moves focus to the first selectable option.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autowidth",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the select has a compact layout or not.",
              "fieldName": "autoWidth",
              "propName": "autowidth"
            },
            {
              "name": "minimal",
              "type": {
                "text": "boolean"
              },
              "description": "Whether the select has a compact layout or not.",
              "fieldName": "minimal",
              "propName": "minimal"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The open attribute.",
              "fieldName": "open",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              },
              "propName": "open"
            },
            {
              "name": "position",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "description": "Reflects the placement for the listbox when the select is open.",
              "fieldName": "positionAttribute",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              },
              "propName": "position"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates if the listbox is in multi-selection mode.",
              "fieldName": "multiple",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            }
          ],
          "superclass": {
            "name": "Select",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-select",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the button content",
              "name": "start",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "description": "Content which can be provided after the button content",
              "name": "end",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "description": "The element representing the select button",
              "name": "button-container",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "description": "The selected value",
              "name": "selected-value",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "description": "The visual indicator for the expand/collapse state of the button",
              "name": "indicator",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "description": "The default slot for slotted options",
              "name": "",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The element representing the select invoking element",
              "name": "control",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "description": "The element wrapping the selected value",
              "name": "selected-value",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "description": "The element wrapping the visual indicator",
              "name": "indicator",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "description": "The listbox element",
              "name": "listbox",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'input' event when the value updates",
              "name": "input",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            },
            {
              "description": "Fires a custom 'change' event when the value updates",
              "name": "change",
              "inheritedFrom": {
                "name": "Select",
                "module": "src/select/select.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpSelect",
          "description": "A function that returns a @microsoft/fast-foundation#Select registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#selectTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpSelect",
          "declaration": {
            "name": "jpSelect",
            "module": "src/select/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "JupyterSelect",
            "module": "src/select/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "selectStyles",
          "declaration": {
            "name": "styles",
            "module": "src/select/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/skeleton/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton class",
          "name": "Skeleton",
          "superclass": {
            "name": "Skeleton",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-skeleton",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot",
              "name": "",
              "inheritedFrom": {
                "name": "Skeleton",
                "module": "src/skeleton/skeleton.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "description": "Indicates the Skeleton should have a filled style.",
              "fieldName": "fill",
              "inheritedFrom": {
                "name": "Skeleton",
                "module": "src/skeleton/skeleton.ts"
              },
              "propName": "fill"
            },
            {
              "name": "shape",
              "type": {
                "text": "SkeletonShape"
              },
              "default": "\"rect\"",
              "description": "Indicates what the shape of the Skeleton should be.",
              "fieldName": "shape",
              "inheritedFrom": {
                "name": "Skeleton",
                "module": "src/skeleton/skeleton.ts"
              },
              "propName": "shape"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "Indicates that the component can accept a pattern URL.",
              "fieldName": "pattern",
              "inheritedFrom": {
                "name": "Skeleton",
                "module": "src/skeleton/skeleton.ts"
              },
              "propName": "pattern"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the component has an activated shimmer effect",
              "fieldName": "shimmer",
              "inheritedFrom": {
                "name": "Skeleton",
                "module": "src/skeleton/skeleton.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the Skeleton should have a filled style.",
              "inheritedFrom": {
                "name": "Skeleton",
                "module": "src/skeleton/skeleton.ts"
              }
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "SkeletonShape"
              },
              "privacy": "public",
              "default": "\"rect\"",
              "description": "Indicates what the shape of the Skeleton should be.",
              "inheritedFrom": {
                "name": "Skeleton",
                "module": "src/skeleton/skeleton.ts"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates that the component can accept a pattern URL.",
              "inheritedFrom": {
                "name": "Skeleton",
                "module": "src/skeleton/skeleton.ts"
              }
            },
            {
              "kind": "field",
              "name": "shimmer",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that the component has an activated shimmer effect",
              "inheritedFrom": {
                "name": "Skeleton",
                "module": "src/skeleton/skeleton.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpSkeleton",
          "description": "A function that returns a @microsoft/fast-foundation#Skeleton registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#skeletonTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpSkeleton",
          "declaration": {
            "name": "jpSkeleton",
            "module": "src/skeleton/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Skeleton",
          "declaration": {
            "name": "JupyterSkeleton",
            "module": "src/skeleton/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeletonStyles",
          "declaration": {
            "name": "styles",
            "module": "src/skeleton/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/slider/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Slider class",
          "name": "Slider",
          "superclass": {
            "name": "Slider",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-slider",
          "customElement": true,
          "slots": [
            {
              "description": "The track of the slider",
              "name": "track",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "description": "The track-start visual indicator",
              "name": "track-start",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "description": "The slider thumb",
              "name": "thumb",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "description": "The default slot for labels",
              "name": "",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The region used to position the elements of the slider",
              "name": "positioning-region",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "description": "The region containing the track elements",
              "name": "track-container",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "description": "The element wrapping the track start slot",
              "name": "track-start",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "description": "The thumb container element which is programatically positioned",
              "name": "thumb-container",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              },
              "propName": "readonly"
            },
            {
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The minimum allowed value.",
              "fieldName": "min",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "description": "The orientation of the slider.",
              "fieldName": "orientation",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              },
              "propName": "orientation"
            },
            {
              "name": "mode",
              "type": {
                "text": "SliderMode"
              },
              "description": "The selection mode.",
              "fieldName": "mode",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              },
              "propName": "mode"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The value property, typed as a number.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueTextFormatter",
              "type": {
                "text": "(value: string) => string | null"
              },
              "privacy": "public",
              "description": "Custom function that generates a string for the component's \"aria-valuetext\" attribute based on the current value.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The minimum allowed value.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "minChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "10",
              "description": "The maximum allowed value.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "Value to increment or decrement via arrow keys, mouse click or drag.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "privacy": "public",
              "description": "The orientation of the slider.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "orientationChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "SliderMode"
              },
              "privacy": "public",
              "description": "The selection mode.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "increment",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Increment the value by the step",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "decrement",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Decrement the value by the step",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "keypressHandler",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "setThumbPositionForOrientation",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "Direction"
                  },
                  "description": "writing mode"
                }
              ],
              "description": "Places the thumb based on the current value",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateStepMultiplier",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Update the step multiplier used to ensure rounding errors from steps that\nare not whole numbers",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "setupTrackConstraints",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "setupListeners",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "midpoint",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "setupDefaultValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleThumbMouseDown",
              "privacy": "private",
              "description": "Handle mouse moves during a thumb drag operation\nIf the event handler is null it removes the events",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleMouseMove",
              "privacy": "private",
              "description": "Handle mouse moves during a thumb drag operation",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "calculateNewValue",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleWindowMouseUp",
              "privacy": "private",
              "description": "Handle a window mouse up during a drag operation",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "stopDragging",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "description": "MouseEvent or null. If there is no event handler it will remove the events",
                  "name": "e"
                }
              ],
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "convertToConstrainedValue",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the slider value changes",
              "name": "change",
              "inheritedFrom": {
                "name": "Slider",
                "module": "src/slider/slider.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpSlider",
          "description": "A function that returns a @microsoft/fast-foundation#Slider registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#sliderTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpSlider",
          "declaration": {
            "name": "jpSlider",
            "module": "src/slider/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slider",
          "declaration": {
            "name": "JupyterSlider",
            "module": "src/slider/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "sliderStyles",
          "declaration": {
            "name": "styles",
            "module": "src/slider/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/slider-label/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Slider label class",
          "name": "SliderLabel",
          "members": [
            {
              "kind": "method",
              "name": "sliderOrientationChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The position of the label relative to the min and max value of the parent {@link @microsoft/fast-foundation#(Slider:class)}.",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            },
            {
              "kind": "method",
              "name": "positionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideMark",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the tick mark.",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the label. This is generally controlled by the parent {@link @microsoft/fast-foundation#(Slider:class)}.",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            },
            {
              "kind": "field",
              "name": "notifier",
              "type": {
                "text": "Notifier"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            },
            {
              "kind": "method",
              "name": "isSliderConfig",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "node is SliderConfiguration"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            },
            {
              "kind": "field",
              "name": "getSliderConfiguration",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            },
            {
              "kind": "field",
              "name": "positionAsStyle",
              "privacy": "private",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "SliderLabel",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-slider-label",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the label content",
              "name": "",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The element wrapping the label mark and text",
              "name": "root",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "string"
              },
              "description": "The position of the label relative to the min and max value of the parent @microsoft/fast-foundation#(Slider:class).",
              "fieldName": "position",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              },
              "propName": "position"
            },
            {
              "name": "hide-mark",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the tick mark.",
              "fieldName": "hideMark",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              },
              "propName": "hideMark"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the label. This is generally controlled by the parent @microsoft/fast-foundation#(Slider:class).",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "SliderLabel",
                "module": "src/slider-label/slider-label.ts"
              },
              "propName": "disabled"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpSliderLabel",
          "description": "A function that returns a @microsoft/fast-foundation#SliderLabel registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#sliderLabelTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpSliderLabel",
          "declaration": {
            "name": "jpSliderLabel",
            "module": "src/slider-label/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "SliderLabel",
          "declaration": {
            "name": "JupyterSliderLabel",
            "module": "src/slider-label/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "horizontalSliderLabelStyles",
          "declaration": {
            "name": "horizontalSliderLabelStyles",
            "module": "src/slider-label/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "sliderLabelStyles",
          "declaration": {
            "name": "styles",
            "module": "src/slider-label/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "verticalSliderLabelStyles",
          "declaration": {
            "name": "verticalSliderLabelStyles",
            "module": "src/slider-label/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Switch class",
          "name": "Switch",
          "superclass": {
            "name": "Switch",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-switch",
          "customElement": true,
          "slots": [
            {
              "description": "The deafult slot for the label",
              "name": "",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "description": "The message when in a checked state",
              "name": "checked-message",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "description": "The message when in an unchecked state",
              "name": "unchecked-message",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The label",
              "name": "label",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "description": "The element representing the switch, which wraps the indicator",
              "name": "switch",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "description": "The wrapper for the status messages",
              "name": "status-message",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "description": "The checked message",
              "name": "checked-message",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "description": "The unchecked message",
              "name": "unchecked-message",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              },
              "propName": "readonly"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emits a custom change event when the checked state changes",
              "name": "change",
              "inheritedFrom": {
                "name": "Switch",
                "module": "src/switch/switch.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpSwitch",
          "description": "A function that returns a @microsoft/fast-foundation#Switch registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#switchTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpSwitch",
          "declaration": {
            "name": "jpSwitch",
            "module": "src/switch/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "JupyterSwitch",
            "module": "src/switch/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "switchStyles",
          "declaration": {
            "name": "styles",
            "module": "src/switch/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tab class",
          "name": "Tab",
          "superclass": {
            "name": "Tab",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-tab",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the tab content",
              "name": "",
              "inheritedFrom": {
                "name": "Tab",
                "module": "src/tab/tab.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute for more information.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Tab",
                "module": "src/tab/tab.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "Tab",
                "module": "src/tab/tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpTab",
          "description": "A function that returns a @microsoft/fast-foundation#Tab registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#tabTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpTab",
          "declaration": {
            "name": "jpTab",
            "module": "src/tab/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Tab",
          "declaration": {
            "name": "JupyterTab",
            "module": "src/tab/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "tabStyles",
          "declaration": {
            "name": "styles",
            "module": "src/tab/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab-panel/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tab panel class",
          "name": "TabPanel",
          "superclass": {
            "name": "TabPanel",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-tab-panel",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the tabpanel content",
              "name": "",
              "inheritedFrom": {
                "name": "TabPanel",
                "module": "src/tab-panel/tab-panel.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpTabPanel",
          "description": "A function that returns a @microsoft/fast-foundation#TabPanel registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#tabPanelTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpTabPanel",
          "declaration": {
            "name": "jpTabPanel",
            "module": "src/tab-panel/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "TabPanel",
          "declaration": {
            "name": "JupyterTabPanel",
            "module": "src/tab-panel/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "tabPanelStyles",
          "declaration": {
            "name": "styles",
            "module": "src/tab-panel/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tabs/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabs class",
          "name": "Tabs",
          "superclass": {
            "name": "Tabs",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-tabs",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the tablist element",
              "name": "start",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "description": "Content which can be provided after the tablist element",
              "name": "end",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "description": "The slot for tabs",
              "name": "tab",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "description": "The slot for tabpanels",
              "name": "tabpanel",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The element wrapping for the tabs",
              "name": "tablist",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "description": "The tab slot",
              "name": "tab",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "description": "The visual indicator",
              "name": "activeIndicator",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "description": "The tabpanel slot",
              "name": "tabpanel",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "orientation",
              "type": {
                "text": "TabsOrientation"
              },
              "description": "The orientation",
              "fieldName": "orientation",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              },
              "propName": "orientation"
            },
            {
              "name": "activeid",
              "type": {
                "text": "string"
              },
              "description": "The id of the active tab",
              "fieldName": "activeid",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              },
              "propName": "activeid"
            },
            {
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether or not to show the active indicator",
              "fieldName": "activeindicator",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "TabsOrientation"
              },
              "privacy": "public",
              "description": "The orientation",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeid",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The id of the active tab",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeindicator",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Whether or not to show the active indicator",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "activetab",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public",
              "description": "A reference to the active tab",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "prevActiveTabIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeTabIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "ticking",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabIds",
              "type": {
                "text": "Array<string>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabpanelIds",
              "type": {
                "text": "Array<string>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "change",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "isDisabledElement",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "isHiddenElement",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "getActiveIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "setTabs",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "setTabPanels",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTabIds",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTabPanelIds",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "setComponent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleTabClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "isHorizontal",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleTabKeyDown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleActiveIndicatorPosition",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "animateActiveIndicator",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "adjust",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "adjustment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "The adjust method for FASTTabs",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "adjustForward",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "adjustBackward",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "moveToTabByIndex",
              "privacy": "private",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusTab",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when a tab is clicked or during keyboard navigation",
              "name": "change",
              "inheritedFrom": {
                "name": "Tabs",
                "module": "src/tabs/tabs.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpTabs",
          "description": "A function that returns a @microsoft/fast-foundation#Tabs registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#tabsTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpTabs",
          "declaration": {
            "name": "jpTabs",
            "module": "src/tabs/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "../tab/index.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "../tab-panel/index.js"
          }
        },
        {
          "kind": "js",
          "name": "Tabs",
          "declaration": {
            "name": "JupyterTabs",
            "module": "src/tabs/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "tabsStyles",
          "declaration": {
            "name": "styles",
            "module": "src/tabs/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-area/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Textarea class",
          "name": "TextArea",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "TextAreaAppearance"
              },
              "privacy": "public",
              "default": "'outline'",
              "description": "The appearance of the element."
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "TextAreaResize"
              },
              "privacy": "public",
              "description": "The resize mode of the element.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that this element should get focus after the page finishes loading.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "autofocusChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "formId",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id | id} of the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form | form} the element is associated to",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "listChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters a user can enter.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters a user can enter.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "minlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name of the element.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "cols",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "20",
              "description": "Sizes the element horizontally by a number of character columns.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Sizes the element vertically by a number of character rows.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Sets if the element is eligible for spell checking\nbut the UA.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "spellcheckChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects all the text in the text area",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "TextAreaAppearance"
              },
              "default": "'outline'",
              "description": "The appearance of the element.",
              "fieldName": "appearance",
              "propName": "appearance"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly",
              "default": "20",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "name": "resize",
              "type": {
                "text": "TextAreaResize"
              },
              "description": "The resize mode of the element.",
              "fieldName": "resize",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              },
              "propName": "resize"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "The https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id | id of the https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form | form the element is associated to",
              "fieldName": "formId",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              },
              "propName": "form"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
              "fieldName": "list",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              },
              "propName": "list"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the element.",
              "fieldName": "name",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              },
              "propName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              },
              "propName": "placeholder"
            }
          ],
          "superclass": {
            "name": "TextArea",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-text-area",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the label",
              "name": "",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The label",
              "name": "label",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "description": "The element wrapping the control",
              "name": "root",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            },
            {
              "description": "The textarea element",
              "name": "control",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emits a custom 'change' event when the textarea emits a change event",
              "name": "change",
              "inheritedFrom": {
                "name": "TextArea",
                "module": "src/text-area/text-area.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpTextArea",
          "description": "A function that returns a @microsoft/fast-foundation#TextArea registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#textAreaTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpTextArea",
          "declaration": {
            "name": "jpTextArea",
            "module": "src/text-area/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "TextArea",
          "declaration": {
            "name": "JupyterTextArea",
            "module": "src/text-area/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "textAreaStyles",
          "declaration": {
            "name": "styles",
            "module": "src/text-area/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Text field class",
          "name": "TextField",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "type": {
                "text": "TextFieldAppearance"
              },
              "privacy": "public",
              "default": "'outline'",
              "description": "The appearance of the element."
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that this element should get focus after the page finishes loading. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "autofocusChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "placeholderChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "TextFieldType"
              },
              "privacy": "public",
              "description": "Allows setting a type or mode of text.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "typeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "listChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters a user can enter.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters a user can enter.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "minlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A regular expression that the value must match to pass validation.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "patternChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Sets the width of the element to a specified number of characters.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "sizeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Controls whether or not to enable spell checking for the input field, or if the default spell checking configuration should be used.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "spellcheckChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects all the text in the text field",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "type": {
                "text": "TextFieldAppearance"
              },
              "default": "'outline'",
              "description": "The appearance of the element.",
              "fieldName": "appearance",
              "propName": "appearance"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              },
              "propName": "readonly"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that this element should get focus after the page finishes loading. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute for more information.",
              "fieldName": "autofocus",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              },
              "propName": "placeholder"
            },
            {
              "name": "type",
              "type": {
                "text": "TextFieldType"
              },
              "description": "Allows setting a type or mode of text.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              },
              "propName": "type"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
              "fieldName": "list",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              },
              "propName": "list"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression that the value must match to pass validation.",
              "fieldName": "pattern",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              },
              "propName": "pattern"
            }
          ],
          "superclass": {
            "name": "TextField",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-text-field",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the number field input",
              "name": "start",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "description": "Content which can be provided after the number field input",
              "name": "end",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "description": "The default slot for the label",
              "name": "",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The label",
              "name": "label",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "description": "The element wrapping the control, including start and end slots",
              "name": "root",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            },
            {
              "description": "The text field element",
              "name": "control",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the value has changed",
              "name": "change",
              "inheritedFrom": {
                "name": "TextField",
                "module": "src/text-field/text-field.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpTextField",
          "description": "A function that returns a @microsoft/fast-foundation#TextField registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#textFieldTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpTextField",
          "declaration": {
            "name": "jpTextField",
            "module": "src/text-field/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "TextField",
          "declaration": {
            "name": "JupyterTextField",
            "module": "src/text-field/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "textFieldStyles",
          "declaration": {
            "name": "styles",
            "module": "src/text-field/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/toolbar/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Toolbar Custom HTML Element.\nImplements the https://w3c.github.io/aria-practices/#Toolbar|ARIA Toolbar.",
          "name": "FoundationToolbar",
          "cssParts": [
            {
              "description": "The element containing the items, start and end slots",
              "name": "positioning-region"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the slotted items",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the slotted items",
              "name": "end"
            },
            {
              "description": "The default slot for slotted items",
              "name": ""
            },
            {
              "description": "The toolbar label",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "activeIndex"
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "privacy": "public",
              "description": "The orientation of the toolbar."
            },
            {
              "kind": "method",
              "name": "slottedItemsChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "childItems",
              "type": {
                "text": "Element[]"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "childItemsChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "undefined | Element[]"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "Element[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "description": "The orientation of the toolbar.",
              "fieldName": "orientation"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "package": "@microsoft/fast-foundation"
          }
        },
        {
          "kind": "class",
          "description": "Includes ARIA states and properties relating to the ARIA toolbar role",
          "name": "DelegatesARIAToolbar",
          "members": [
            {
              "kind": "field",
              "name": "ariaLabelledby",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "The id of the element labeling the toolbar."
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "The label surfaced to assistive technologies."
            }
          ],
          "attributes": [
            {
              "name": "aria-labelledby",
              "type": {
                "text": "string | null"
              },
              "description": "The id of the element labeling the toolbar.",
              "fieldName": "ariaLabelledby"
            },
            {
              "name": "aria-label",
              "type": {
                "text": "string | null"
              },
              "description": "The label surfaced to assistive technologies.",
              "fieldName": "ariaLabel"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "Toolbar",
          "superclass": {
            "name": "FoundationToolbar",
            "module": "src/toolbar/index.ts"
          },
          "tagName": "jp-toolbar",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpToolbar",
          "description": "A function that returns a @microsoft/fast-foundation#Toolbar registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#toolbarTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FoundationToolbar",
          "declaration": {
            "name": "FoundationToolbar",
            "module": "src/toolbar/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIAToolbar",
          "declaration": {
            "name": "DelegatesARIAToolbar",
            "module": "src/toolbar/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Toolbar",
          "declaration": {
            "name": "Toolbar",
            "module": "src/toolbar/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpToolbar",
          "declaration": {
            "name": "jpToolbar",
            "module": "src/toolbar/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "toolbarStyles",
          "declaration": {
            "name": "styles",
            "module": "src/toolbar/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tooltip/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tooltip class",
          "name": "Tooltip",
          "superclass": {
            "name": "Tooltip",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-tooltip",
          "customElement": true,
          "slots": [
            {
              "description": "The default slot for the tooltip content",
              "name": "",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The tooltip element",
              "name": "tooltip",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "Whether the tooltip is visible or not.\nIf undefined tooltip is shown when anchor element is hovered",
              "fieldName": "visible",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The id of the element the tooltip is anchored to",
              "fieldName": "anchor",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              },
              "propName": "anchor"
            },
            {
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "300",
              "description": "The delay in milliseconds before a tooltip is shown after a hover event",
              "fieldName": "delay",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              },
              "propName": "delay"
            },
            {
              "name": "position",
              "type": {
                "text": "TooltipPosition"
              },
              "description": "Controls the placement of the tooltip relative to the anchor.\nWhen the position is undefined the tooltip is placed above or below the anchor based on available space.",
              "fieldName": "position",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              },
              "propName": "position"
            },
            {
              "name": "auto-update-mode",
              "type": {
                "text": "AutoUpdateMode"
              },
              "default": "\"anchor\"",
              "description": "Controls when the tooltip updates its position, default is 'anchor' which only updates when\nthe anchor is resized.  'auto' will update on scroll/resize events.\nCorresponds to anchored-region auto-update-mode.",
              "fieldName": "autoUpdateMode",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              },
              "propName": "autoUpdateMode"
            },
            {
              "name": "horizontal-viewport-lock",
              "type": {
                "text": "boolean"
              },
              "description": "Controls if the tooltip will always remain fully in the viewport on the horizontal axis",
              "fieldName": "horizontalViewportLock",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              },
              "propName": "horizontalViewportLock"
            },
            {
              "name": "vertical-viewport-lock",
              "type": {
                "text": "boolean"
              },
              "description": "Controls if the tooltip will always remain fully in the viewport on the vertical axis",
              "fieldName": "verticalViewportLock",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              },
              "propName": "verticalViewportLock"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether the tooltip is visible or not.\nIf undefined tooltip is shown when anchor element is hovered",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "method",
              "name": "visibleChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "The id of the element the tooltip is anchored to",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "method",
              "name": "anchorChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "delay",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "300",
              "description": "The delay in milliseconds before a tooltip is shown after a hover event",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "TooltipPosition"
              },
              "privacy": "public",
              "description": "Controls the placement of the tooltip relative to the anchor.\nWhen the position is undefined the tooltip is placed above or below the anchor based on available space.",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "method",
              "name": "positionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoUpdateMode",
              "type": {
                "text": "AutoUpdateMode"
              },
              "privacy": "public",
              "default": "\"anchor\"",
              "description": "Controls when the tooltip updates its position, default is 'anchor' which only updates when\nthe anchor is resized.  'auto' will update on scroll/resize events.\nCorresponds to anchored-region auto-update-mode.",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontalViewportLock",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Controls if the tooltip will always remain fully in the viewport on the horizontal axis",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "verticalViewportLock",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Controls if the tooltip will always remain fully in the viewport on the vertical axis",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "the html element currently being used as anchor.\nSetting this directly overrides the anchor attribute.",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "method",
              "name": "anchorElementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "HTMLElement | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "method",
              "name": "viewportElementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "showDelayTimer",
              "type": {
                "text": "number | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The timer that tracks delay time before the tooltip is shown on hover",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideDelayTimer",
              "type": {
                "text": "number | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The timer that tracks delay time before the tooltip is hidden",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "isAnchorHoveredFocused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Indicates whether the anchor is currently being hovered or has focus",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "isRegionHovered",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Indicates whether the region is currently being hovered",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleRegionMouseOver",
              "privacy": "private",
              "description": "mouse enters region",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleRegionMouseOut",
              "privacy": "private",
              "description": "mouse leaves region",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleAnchorMouseOver",
              "privacy": "private",
              "description": "mouse enters anchor",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleAnchorMouseOut",
              "privacy": "private",
              "description": "mouse leaves anchor",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleAnchorFocusIn",
              "privacy": "private",
              "description": "anchor gets focus",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleAnchorFocusOut",
              "privacy": "private",
              "description": "anchor loses focus",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "startHideDelayTimer",
              "privacy": "private",
              "description": "starts the hide timer",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearHideDelayTimer",
              "privacy": "private",
              "description": "clears the hide delay",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "startShowDelayTimer",
              "privacy": "private",
              "description": "starts the show timer if not currently running",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "startHover",
              "privacy": "private",
              "description": "start hover",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearShowDelayTimer",
              "privacy": "private",
              "description": "clears the show delay",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateLayout",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "updated the properties being passed to the anchored region",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "getAnchor",
              "privacy": "private",
              "description": "Gets the anchor element by id",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleDocumentKeydown",
              "privacy": "private",
              "description": "handles key down events to check for dismiss",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "updateTooltipVisibility",
              "privacy": "private",
              "description": "determines whether to show or hide the tooltip based on current state",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "showTooltip",
              "privacy": "private",
              "description": "shows the tooltip",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "privacy": "private",
              "description": "hides the tooltip",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "setRegionProps",
              "privacy": "private",
              "description": "updates the tooltip anchored region props after it has been\nadded to the DOM",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'dismiss' event when the tooltip is visible and escape key is pressed",
              "name": "dismiss",
              "inheritedFrom": {
                "name": "Tooltip",
                "module": "src/tooltip/tooltip.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpTooltip",
          "description": "A function that returns a @microsoft/fast-foundation#Tooltip registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#tooltipTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpTooltip",
          "declaration": {
            "name": "jpTooltip",
            "module": "src/tooltip/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Tooltip",
          "declaration": {
            "name": "JupyterTooltip",
            "module": "src/tooltip/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "tooltipStyles",
          "declaration": {
            "name": "styles",
            "module": "src/tooltip/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tree-item/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tree item class",
          "name": "TreeItem",
          "superclass": {
            "name": "TreeItem",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-tree-item",
          "customElement": true,
          "slots": [
            {
              "description": "Content which can be provided before the tree item content",
              "name": "start",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "description": "Content which can be provided after the tree item content",
              "name": "end",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "description": "The default slot for tree item text content",
              "name": "",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "description": "The slot for tree items (fast tree items manage this assignment themselves)",
              "name": "item",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "description": "The expand/collapse button",
              "name": "expand-collapse-button",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The element used to position the tree item content with exception of any child nodes",
              "name": "positioning-region",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "description": "The element containing the expand/collapse, start, and end slots",
              "name": "content-region",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "description": "The element wrapping any child items",
              "name": "items",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "description": "The expand/collapse button",
              "name": "expand-collapse-button",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be appear expanded by user interaction.",
              "fieldName": "expanded",
              "default": "false",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When true, the control will be appear expanded by user interaction.",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "expandedChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will appear selected by user interaction.",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectedChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute} for more information.",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusItem",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the element to focus"
                }
              ],
              "description": "Places document focus on a tree item",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "isNestedItem",
              "privacy": "public",
              "description": "Whether the tree is nested",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'expanded-change' event when the expanded state changes",
              "name": "expanded-change",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            },
            {
              "description": "Fires a custom 'selected-change' event when the selected state changes",
              "name": "selected-change",
              "inheritedFrom": {
                "name": "TreeItem",
                "module": "src/tree-item/tree-item.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpTreeItem",
          "description": "A function that returns a @microsoft/fast-foundation#TreeItem registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#treeItemTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpTreeItem",
          "declaration": {
            "name": "jpTreeItem",
            "module": "src/tree-item/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "TreeItem",
          "declaration": {
            "name": "JupyterTreeItem",
            "module": "src/tree-item/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "treeItemStyles",
          "declaration": {
            "name": "styles",
            "module": "src/tree-item/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tree-view/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tree view class",
          "name": "JupyterTreeView",
          "superclass": {
            "name": "TreeView",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "",
          "slots": [
            {
              "description": "The default slot for tree items",
              "name": "",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "render-collapsed-nodes",
              "type": {
                "text": "boolean"
              },
              "description": "/**\n  When true, the control will be appear expanded by user interaction.",
              "fieldName": "renderCollapsedNodes",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "renderCollapsedNodes",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "/**\n  When true, the control will be appear expanded by user interaction.",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "currentSelected",
              "type": {
                "text": "HTMLElement | TreeItem | null"
              },
              "privacy": "public",
              "description": "The currently selected tree item",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "slottedTreeItemsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "nested",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusNextNode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ],
              "description": "Move focus to a tree item based on its offset from the provided item",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "setItems",
              "privacy": "private",
              "description": "Updates the tree view when slottedTreeItems changes",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "getValidFocusableItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "null | HTMLElement | TreeItem"
                }
              },
              "description": "checks if there are any nested tree items",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkForNestedItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "checks if there are any nested tree items",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "privacy": "private",
              "description": "check if the item is focusable",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelectedElement",
              "privacy": "private",
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "getVisibleNodes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement[]"
                }
              },
              "inheritedFrom": {
                "name": "TreeView",
                "module": "src/tree-view/tree-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpTreeView",
          "description": "A function that returns a @microsoft/fast-foundation#TreeView registration for configuring the component with a DesignSystem.\nImplements @microsoft/fast-foundation#treeViewTemplate",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpTreeView",
          "declaration": {
            "name": "jpTreeView",
            "module": "src/tree-view/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "TreeView",
          "declaration": {
            "name": "JupyterTreeView",
            "module": "src/tree-view/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "treeViewStyles",
          "declaration": {
            "name": "styles",
            "module": "src/tree-view/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/drafts/picker/index.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Picker class",
          "name": "Picker",
          "superclass": {
            "name": "Picker",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-draft-picker",
          "customElement": true,
          "attributes": [
            {
              "name": "selection",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Currently selected items. Comma delineated string ie. \"apples,oranges\".",
              "fieldName": "selection",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "selection"
            },
            {
              "name": "options",
              "type": {
                "text": "string"
              },
              "description": "Currently available options. Comma delineated string ie. \"apples,oranges\".",
              "fieldName": "options",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "options"
            },
            {
              "name": "filter-selected",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component should remove an option from the list when it is in the selection",
              "fieldName": "filterSelected",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "filterSelected"
            },
            {
              "name": "filter-query",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component should remove options based on the current query",
              "fieldName": "filterQuery",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "filterQuery"
            },
            {
              "name": "max-selected",
              "type": {
                "text": "number | undefined"
              },
              "description": "The maximum number of items that can be selected.",
              "fieldName": "maxSelected",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "maxSelected"
            },
            {
              "name": "no-suggestions-text",
              "type": {
                "text": "string"
              },
              "default": "\"No suggestions available\"",
              "description": "The text to present to assistive technolgies when no suggestions are available.",
              "fieldName": "noSuggestionsText",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "noSuggestionsText"
            },
            {
              "name": "suggestions-available-text",
              "type": {
                "text": "string"
              },
              "default": "\"Suggestions available\"",
              "description": "The text to present to assistive technolgies when suggestions are available.",
              "fieldName": "suggestionsAvailableText",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "suggestionsAvailableText"
            },
            {
              "name": "loading-text",
              "type": {
                "text": "string"
              },
              "default": "\"Loading suggestions\"",
              "description": "The text to present to assistive technologies when suggestions are loading.",
              "fieldName": "loadingText",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "loadingText"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Applied to the aria-label attribute of the input element",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "label"
            },
            {
              "name": "labelledby",
              "type": {
                "text": "string"
              },
              "description": "Applied to the aria-labelledby attribute of the input element",
              "fieldName": "labelledBy",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "labelledby"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Applied to the placeholder attribute of the input element",
              "fieldName": "placeholder",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "placeholder"
            },
            {
              "name": "menu-placement",
              "type": {
                "text": "menuConfigs"
              },
              "default": "\"bottom-fill\"",
              "description": "Controls menu placement",
              "fieldName": "menuPlacement",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              },
              "propName": "menuPlacement"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "Currently selected items. Comma delineated string ie. \"apples,oranges\".",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Currently available options. Comma delineated string ie. \"apples,oranges\".",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "optionsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "filterSelected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Whether the component should remove an option from the list when it is in the selection",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "filterQuery",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Whether the component should remove options based on the current query",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxSelected",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "public",
              "description": "The maximum number of items that can be selected.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "noSuggestionsText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"No suggestions available\"",
              "description": "The text to present to assistive technolgies when no suggestions are available.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "suggestionsAvailableText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"Suggestions available\"",
              "description": "The text to present to assistive technolgies when suggestions are available.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "loadingText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"Loading suggestions\"",
              "description": "The text to present to assistive technologies when suggestions are loading.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Applied to the aria-label attribute of the input element",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelledBy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Applied to the aria-labelledby attribute of the input element",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Applied to the placeholder attribute of the input element",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuPlacement",
              "type": {
                "text": "menuConfigs"
              },
              "privacy": "public",
              "default": "\"bottom-fill\"",
              "description": "Controls menu placement",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "menuPlacementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "showLoading",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to display a loading state if the menu is opened.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "showLoadingChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "listItemTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "Template used to generate selected items.\nThis is used in a repeat directive.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "listItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultListItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "Default template to use for selected items (usually specified in the component template).\nThis is used in a repeat directive.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "defaultListItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuOptionTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "Template to use for available options.\nThis is used in a repeat directive.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "menuOptionTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultMenuOptionTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "Default template to use for available options (usually specified in the template).\nThis is used in a repeat directive.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "defaultMenuOptionTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "listItemContentsTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "Template to use for the contents of a selected list item",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "menuOptionContentsTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "Template to use for the contents of menu options",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "optionsList",
              "type": {
                "text": "string[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "Current list of options in array form",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "optionsListChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The text value currently in the input field",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "queryChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "filteredOptionsListChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "flyoutOpenChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "showNoOptionsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "itemsPlaceholderElement",
              "type": {
                "text": "Node"
              },
              "privacy": "public",
              "description": "Reference to the placeholder element for the repeat directive",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "itemsRepeatBehavior",
              "type": {
                "text": "RepeatBehavior | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "optionsRepeatBehavior",
              "type": {
                "text": "RepeatBehavior | null"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "optionsPlaceholder",
              "type": {
                "text": "Node"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputElementView",
              "type": {
                "text": "HTMLView | null"
              },
              "privacy": "private",
              "default": "null",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "description": "Move focus to the input element",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "initialize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Initialize the component.  This is delayed a frame to ensure children are connected as well.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleFlyout",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "open",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggles the menu flyout",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleTextInput",
              "privacy": "private",
              "description": "Handle input event from input element",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleInputClick",
              "privacy": "private",
              "description": "Handle click event from input element",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleMenuOptionsUpdated",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handle the menu options updated event from the child menu",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handle key down events.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusIn",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "description": "Handle focus in events.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleFocusOut",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "description": "Handle focus out events.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSelectionChange",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "The list of selected items has changed",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleRegionLoaded",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Anchored region is loaded, menu and options exist in the DOM.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "setRegionProps",
              "privacy": "private",
              "description": "Sets properties on the anchored region once it is instanciated.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkMaxItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Checks if the maximum number of items has been chosen and updates the ui.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleItemInvoke",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "A list item has been invoked.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleOptionInvoke",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "A menu option has been invoked.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "incrementFocusedItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Increments the focused list item by the specified amount",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "disableMenu",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disables the menu. Note that the menu can be open, just doens't have any valid options on display.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "setFocusedOption",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "optionIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Sets the currently focused menu option by index",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateListItemTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the template used for the list item repeat behavior",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateOptionTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the template used for the menu option repeat behavior",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateFilteredOptions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the filtered options array",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateMenuConfig",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the menu configuration",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "configLookup",
              "type": {
                "text": "object"
              },
              "privacy": "private",
              "default": "{\n        top: FlyoutPosTop,\n        bottom: FlyoutPosBottom,\n        tallest: FlyoutPosTallest,\n        \"top-fill\": FlyoutPosTopFill,\n        \"bottom-fill\": FlyoutPosBottomFill,\n        \"tallest-fill\": FlyoutPosTallestFill,\n    }",
              "description": "matches menu placement values with the associated menu config",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "Picker",
                "module": "src/picker/picker.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpPicker",
          "description": "The FAST Picker Custom Element. Implements @microsoft/fast-foundation#Picker,\n@microsoft/fast-foundation#PickerTemplate"
        },
        {
          "kind": "class",
          "description": "Picker menu class",
          "name": "PickerMenu",
          "superclass": {
            "name": "PickerMenu",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-draft-picker-menu",
          "customElement": true,
          "members": [
            {
              "kind": "method",
              "name": "menuElementsChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerMenu",
                "module": "src/picker/picker-menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "headerElementsChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerMenu",
                "module": "src/picker/picker-menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "footerElementsChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerMenu",
                "module": "src/picker/picker-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "suggestionsAvailableText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Text to display to assistive technology when\nsuggestions are available",
              "inheritedFrom": {
                "name": "PickerMenu",
                "module": "src/picker/picker-menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateOptions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerMenu",
                "module": "src/picker/picker-menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "addSlottedListItems",
              "privacy": "private",
              "parameters": [
                {
                  "name": "slotChildren",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PickerMenu",
                "module": "src/picker/picker-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpPickerMenu",
          "description": "Component that displays the list of available picker options"
        },
        {
          "kind": "class",
          "description": "Picker menu options class",
          "name": "PickerMenuOption",
          "superclass": {
            "name": "PickerMenuOption",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-draft-picker-menu-option",
          "customElement": true,
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The underlying string value of the item",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PickerMenuOption",
                "module": "src/picker/picker-menu-option.ts"
              },
              "propName": "value"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The underlying string value of the item",
              "inheritedFrom": {
                "name": "PickerMenuOption",
                "module": "src/picker/picker-menu-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "contentsTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "The template used to render the contents of the list item",
              "inheritedFrom": {
                "name": "PickerMenuOption",
                "module": "src/picker/picker-menu-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "contentsTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerMenuOption",
                "module": "src/picker/picker-menu-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "customView",
              "type": {
                "text": "HTMLView | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "PickerMenuOption",
                "module": "src/picker/picker-menu-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PickerMenuOption",
                "module": "src/picker/picker-menu-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInvoked",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerMenuOption",
                "module": "src/picker/picker-menu-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerMenuOption",
                "module": "src/picker/picker-menu-option.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnectView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerMenuOption",
                "module": "src/picker/picker-menu-option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpPickerMenuOption",
          "description": "Component that displays available picker menu options"
        },
        {
          "kind": "class",
          "description": "Picker list class",
          "name": "PickerList",
          "superclass": {
            "name": "PickerList",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-draft-picker-list",
          "customElement": true,
          "members": [
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpPickerList",
          "description": "Component that displays the list of selected picker items along\nwith the input combobox"
        },
        {
          "kind": "class",
          "description": "Picker list item class",
          "name": "PickerListItem",
          "superclass": {
            "name": "PickerListItem",
            "package": "@microsoft/fast-foundation"
          },
          "tagName": "jp-draft-picker-list-item",
          "customElement": true,
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The underlying string value of the item",
              "fieldName": "value",
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              },
              "propName": "value"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The underlying string value of the item",
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "contentsTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "The template used to render the contents of the list item",
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "contentsTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "customView",
              "type": {
                "text": "HTMLView | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInvoke",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "disconnectView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "PickerListItem",
                "module": "src/picker/picker-list-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "jpPickerListItem",
          "description": "Component that displays selected items"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "jpPicker",
          "declaration": {
            "name": "jpPicker",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpPickerMenu",
          "declaration": {
            "name": "jpPickerMenu",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpPickerMenuOption",
          "declaration": {
            "name": "jpPickerMenuOption",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpPickerList",
          "declaration": {
            "name": "jpPickerList",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "jpPickerListItem",
          "declaration": {
            "name": "jpPickerListItem",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "Picker",
          "declaration": {
            "name": "JupyterPicker",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "PickerMenu",
          "declaration": {
            "name": "JupyterPickerMenu",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "PickerMenuOption",
          "declaration": {
            "name": "JupyterPickerMenuOption",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "PickerList",
          "declaration": {
            "name": "JupyterPickerList",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "PickerListItem",
          "declaration": {
            "name": "JupyterPickerListItem",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "pickerStyles",
          "declaration": {
            "name": "pickerStyles",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "pickerListItemStyles",
          "declaration": {
            "name": "pickerListItemStyles",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "pickerMenuOptionStyles",
          "declaration": {
            "name": "pickerMenuOptionStyles",
            "module": "src/drafts/picker/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "pickerMenuStyles",
          "declaration": {
            "name": "pickerMenuStyles",
            "module": "src/drafts/picker/index.ts"
          }
        }
      ]
    }
  ]
}
